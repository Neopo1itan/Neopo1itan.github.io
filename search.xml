<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>youyan</title>
    <url>/posts/2492.html</url>
    <content><![CDATA[<p>图床测试<br>中等大小:<a href="https://img.tg/image/OrPPjY"><img data-src="https://ooo.0x0.ooo/2023/11/25/OrPPjY.jpg" alt="OrPPjY.jpg"></a></p>
]]></content>
  </entry>
  <entry>
    <title>JS 性能优化</title>
    <url>/posts/2317.html</url>
    <content><![CDATA[<h2 id="性能优化进阶"><a href="#性能优化进阶" class="headerlink" title="性能优化进阶"></a>性能优化进阶</h2><h3 id="Navigation-Timing-API"><a href="#Navigation-Timing-API" class="headerlink" title="Navigation Timing API"></a>Navigation Timing API</h3><p><strong>面试</strong>:在代码执行之前，浏览器加载页面发生了什么？<br>&#x3D;&gt; 浏览器原理<br>&#x3D;&gt; 广度：DOM 渲染、存储…</p>
<p><strong>打印当前页面耗时:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="attr">javascript</span>:(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> perfData = <span class="variable language_">window</span>.<span class="property">perfomance</span>.<span class="property">timing</span></span><br><span class="line">    cosnt pageLoadTime = perData.<span class="property">loadEventEnd</span> - perData.<span class="property">navigationStart</span> <span class="comment">// 时间戳之差</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前页面加载耗时:&#x27;</span>,pageLoadTime,<span class="string">&#x27;ms&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<blockquote>
<p>_强缓存_：不发请求 -&gt; expires cache-control<br>_协商缓存_：发 -&gt; Last-Modified &amp; - Since | ETag &amp; If-None-Match</p>
</blockquote>
<h3 id="Core-Web-Vitals-网页核心性能指标"><a href="#Core-Web-Vitals-网页核心性能指标" class="headerlink" title="Core Web Vitals - 网页核心性能指标"></a>Core Web Vitals - 网页核心性能指标</h3><ul>
<li>Google 提出的衡量指标</li>
<li>可量化的，反应真实主管体验：加载、交互性、稳定性</li>
</ul>
<h4 id="Largest-Contentful-Paint-LCP"><a href="#Largest-Contentful-Paint-LCP" class="headerlink" title="Largest Contentful Paint (LCP)"></a>Largest Contentful Paint (LCP)</h4><p><font color="#FFAACC"><strong>衡量装载性能</strong></font></p>
<ul>
<li>前 2.5s 内完成最大内容渲染<ul>
<li>a.包括哪些内容？<ul>
<li>【img】元素</li>
<li>【svg】元素</li>
<li>【video】元素</li>
<li>通过 url()函数加载的背景图片元素</li>
<li>包含文本节点或者其他内联文本元素子集的块级元素</li>
</ul>
</li>
<li>b.LCP 低下的原因<ul>
<li>服务器响应慢</li>
<li>阻断 JS 和 CSS 的渲染 &#x3D;&gt; JS DOM 渲染是互斥的</li>
<li>资源加载未优化</li>
<li>客户端渲染机器性能影响 &#x3D;&gt; 提升页面脚本性能</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="First-Input-Delay-FID"><a href="#First-Input-Delay-FID" class="headerlink" title="First Input Delay (FID)"></a>First Input Delay (FID)</h4><p><font color="#FFAACC"><strong>衡量交互性</strong></font></p>
<ul>
<li>页面首次输入延迟小于 100ms<ul>
<li>a. js 执行过多<ul>
<li>避免非必要的 js 后置执行</li>
<li>尽量减少 polyfill</li>
</ul>
</li>
<li>b. 耗时任务过多<ul>
<li>阻塞主线程 50ms 以上 &#x3D;&gt; 长任务</li>
<li>拆分 &amp; 降级</li>
</ul>
</li>
<li>c. 单线程导致的队列阻塞<ul>
<li>worker</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>MS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 新增worker</span></span><br><span class="line"><span class="keyword">const</span> myWorker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主从通信</span></span><br><span class="line">myWorker.<span class="title function_">postMessage</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">myWorker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.js</span></span><br><span class="line"><span class="comment">// 数组遍历 + 读取 + js计算</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	self.<span class="title function_">postMessage</span>(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Cumulative-Layout-Shift-CLS"><a href="#Cumulative-Layout-Shift-CLS" class="headerlink" title="Cumulative Layout Shift(CLS)"></a>Cumulative Layout Shift(CLS)</h4><p><font color="#FFAACC"><strong>衡量视觉的稳定性</strong></font></p>
<ul>
<li>布局的移动发生在两个相邻帧之间，页面 CLS 小于 0.1<ul>
<li>a 不适用无尺寸的元素<ul>
<li>图片、视频、头像…</li>
</ul>
</li>
<li>b 减少内容的插入 &#x3D;&gt; 减少影响布局元素的出现</li>
<li>c 控制字体</li>
</ul>
</li>
</ul>
<h3 id="性能优化体系"><a href="#性能优化体系" class="headerlink" title="性能优化体系"></a>性能优化体系</h3><p>a) 埋点上报 &#x3D;&gt; 点到点 + 信息采集 + 主动上报<br>b) 数据处理 &#x3D;&gt; 数据计算 + 阈值设置 + 数据分类<br>c) 可视化展示<br>d) 告警处理<br>e) 预警体系</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/posts/62985.html</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ul>
<li><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B">函数式编程</a><ul>
<li><a href="#%E8%B5%B7%E6%BA%90">起源</a></li>
<li><a href="#%E5%8E%9F%E7%90%86%E7%89%B9%E7%82%B9">原理特点</a><ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E5%8E%9F%E7%90%86">什么是函数式原理</a></li>
<li><a href="#%E7%90%86%E8%AE%BA%E6%80%9D%E6%83%B3">理论思想</a></li>
</ul>
</li>
<li><a href="#%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91">实际开发</a><ul>
<li><a href="#1%E7%BA%AF%E5%87%BD%E6%95%B0%E6%94%B9%E9%80%A0">1.纯函数改造</a></li>
<li><a href="#2%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%BB%84%E8%A3%85-%E5%8A%A0%E5%B7%A5%E7%BB%84%E8%A3%85">2.流水线组装-加工&amp;组装</a><ul>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E6%96%B9%E5%BA%93">常见的三方库</a></li>
</ul>
</li>
</ul>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>历程：<br>命令式(脚本) &#x3D;&gt; 面向对象式<br>命令式(脚本) &#x3D;&gt; 函数式</p>
<p>解决代码复用的问题</p>
<h2 id="原理特点"><a href="#原理特点" class="headerlink" title="原理特点"></a>原理特点</h2><h3 id="什么是函数式原理"><a href="#什么是函数式原理" class="headerlink" title="什么是函数式原理"></a>什么是函数式原理</h3><ul>
<li><p>加法结合律 | 因式分解 | 完全平方工时</p>
</li>
<li><p>水源 &#x3D;&gt; 组合（水管 + 走线） &#x3D;&gt; 花洒</p>
</li>
</ul>
<h3 id="理论思想"><a href="#理论思想" class="headerlink" title="理论思想"></a>理论思想</h3><ol>
<li>一等公民——函数 &#x3D;&gt; 1.逻辑功能最终实现的落脚点 2.实现函数+拼接流程</li>
<li>声明式编程</li>
<li>惰性执行-衔接性，性能节约</li>
</ol>
<h2 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h2><h3 id="1-纯函数改造"><a href="#1-纯函数改造" class="headerlink" title="1.纯函数改造"></a>1.纯函数改造</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _class = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;objective&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数内部引入了外部变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">score</span> = (<span class="params">str</span>) =&gt; _class.<span class="property">name</span> + <span class="string">&#x27;:&#x27;</span> + str</span><br><span class="line"><span class="comment">// 直接修改了输入参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeClass</span> = (<span class="params">obj, name</span>) =&gt; (obj.<span class="property">name</span> = name)</span><br><span class="line"></span><br><span class="line"><span class="comment">/***** ↓ 修改后 ↓ *****/</span></span><br><span class="line"><span class="keyword">const</span> _class = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;objective&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">score</span> = (<span class="params">obj, str</span>) =&gt; obj.<span class="property">name</span> + <span class="string">&#x27;:&#x27;</span> + str</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeClass</span> = (<span class="params">obj, name</span>) =&gt; (&#123; ...obj, name &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeClass</span>(_class, <span class="string">&#x27;functional&#x27;</span>)</span><br><span class="line"><span class="title function_">score</span>(_class, <span class="string">&#x27;good&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-流水线组装-加工-组装"><a href="#2-流水线组装-加工-组装" class="headerlink" title="2.流水线组装-加工&amp;组装"></a>2.流水线组装-加工&amp;组装</h3><ol>
<li>加工 - 科里化</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// f(x,y,z) =&gt; f(x)(y)(z)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span>=&gt;</span> <span class="keyword">return</span> x+y+z;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 要实现 体系=加工+组装，单个加工输入输出应该单值化 =&gt; 单元函数</span></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="title function_">ajax</span>(method,url,params);</span><br><span class="line"><span class="keyword">const</span> fetch = ajax.<span class="title function_">get</span>(method);</span><br><span class="line"><span class="keyword">const</span> request = <span class="title function_">fetch</span>(url);</span><br><span class="line">组合(fetch,request);</span><br></pre></td></tr></table></figure>

<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>手写构造可拆分传参的累加函数<br>add(1)(2)(3)(4)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造科里化结构</span></span><br><span class="line"><span class="comment">// 输入 处理外层arguments =&gt; 类数组处理</span></span><br><span class="line"><span class="comment">// 传入参数无线拓展 =&gt; 返回函数本身</span></span><br><span class="line"><span class="comment">// 主功能 =&gt; 累加</span></span><br><span class="line"><span class="comment">// 输出 支持从函数到产出的转换</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">...nums</span>) &#123;</span><br><span class="line">	<span class="comment">// input</span></span><br><span class="line">	<span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">	<span class="comment">// 内层</span></span><br><span class="line">	<span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params">...nums</span>) &#123;</span><br><span class="line">		args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">		<span class="keyword">return</span> inner</span><br><span class="line">	&#125;</span><br><span class="line">	inner.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> prev + cur</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>流水线 - 组装函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum1</span> = (<span class="params">x</span>) =&gt; x + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum2</span> = (<span class="params">x</span>) =&gt; x + <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> sum12 = <span class="title function_">compose</span>(sum1, sum2)</span><br><span class="line"><span class="title function_">sum12</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="常见的三方库"><a href="#常见的三方库" class="headerlink" title="常见的三方库"></a>常见的三方库</h2><p>lodash</p>
<p>rxjs</p>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器 Browser</title>
    <url>/posts/15523.html</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>JavaScript 在浏览器下一般三部分组成：<br>ECMAscript DOM BOM</p>
<p><strong>W3C</strong> 是非标准化组织，制定浏览器规范</p>
<p><strong>ECMAscript</strong>：是一种标准，用来标准化 JavaScript 语言，es6、es7 都是其标准化的产物。在浏览器中以 V8，JSCore 等引擎解析。</p>
<p><strong>MDN</strong>：Mozilla Developer Network 规范文档</p>
<span id="more"></span>

<ul>
<li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81-bom-%E5%AF%B9%E8%B1%A1">常见 BOM 对象</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B">事件模型</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98">事件委托</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E6%87%92%E5%8A%A0%E8%BD%BD">实现懒加载</a><ul>
<li><a href="#%E4%BD%BF%E7%94%A8-scroll-event-%E5%92%8C-getboundingclientrect-%E5%AE%9E%E7%8E%B0">使用 scroll event 和 getBoundingClientRect 实现</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8-intersectionobserver-%E5%AE%9E%E7%8E%B0">使用 IntersectionObserver 实现</a></li>
</ul>
</li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82">浏览器请求</a><ul>
<li><a href="#xhr">XHR</a></li>
<li><a href="#fetch">fetch</a><ul>
<li><a href="#1%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%B8%A6-cookie">1.默认不带 cookie</a></li>
<li><a href="#2%E9%94%99%E8%AF%AF%E4%B8%8D%E4%BC%9A-reject">2.错误不会 reject</a></li>
<li><a href="#3%E4%B8%8D%E6%94%AF%E6%8C%81%E8%B6%85%E6%97%B6%E8%AE%BE%E7%BD%AE">3.不支持超时设置</a></li>
<li><a href="#4%E4%B8%AD%E6%AD%A2-fetch%E5%80%9F%E7%94%A8-abortcontroller">4.中止 fetch（借用 AbortController）</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#http-%E7%BC%93%E5%AD%98">Http 缓存</a><ul>
<li><a href="#%E5%BC%BA%E5%88%B6%E7%BC%93%E5%AD%98">强制缓存</a></li>
<li><a href="#%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98">协商缓存</a></li>
<li><a href="#etag-%E5%AE%9E%E7%8E%B0">Etag 实现</a></li>
<li><a href="#%E4%BC%98%E5%8A%A3">优劣</a></li>
</ul>
</li>
</ul>
<h2 id="常见-BOM-对象"><a href="#常见-BOM-对象" class="headerlink" title="常见 BOM 对象"></a>常见 BOM 对象</h2><p><strong>Navigator</strong>：浏览器代码，名称，操作系统，是否在线等</p>
<p><strong>location</strong>：hash，hostname 主机路径，port 端口，origin 协议主机端口；支持 reload、replace 等方法。</p>
<p><strong>screen</strong>：pixelDepth 等</p>
<p><strong>History</strong>：back() forward()等跨网页跳转 pushState()页面不刷新</p>
<h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;dom&quot;</span>&gt;</span>Click!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡:p -&gt; div -&gt; body -&gt; html -&gt; document</span></span><br><span class="line"><span class="comment">//捕获:document -&gt; html -&gt; body -&gt; div -&gt; p</span></span><br><span class="line">el.<span class="title function_">addEventListener</span>(event.<span class="property">function</span>, useCapture)</span><br><span class="line"></span><br><span class="line"><span class="comment">//阻止事件冒泡传播</span></span><br><span class="line">event.<span class="title function_">stopPropagation</span>()</span><br><span class="line"><span class="comment">//阻止默认事件传播</span></span><br><span class="line">event.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="comment">//相同节点绑定多个同类型事件，阻止</span></span><br><span class="line">event.<span class="title function_">stopImmediatePropagation</span>()</span><br></pre></td></tr></table></figure>

<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>利用冒泡实现事件代理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">// 将事件绑定在ul上 点击某个li代理捕获到事件</span><br></pre></td></tr></table></figure>

<h2 id="实现懒加载"><a href="#实现懒加载" class="headerlink" title="实现懒加载"></a>实现懒加载</h2><h3 id="使用-scroll-event-和-getBoundingClientRect-实现"><a href="#使用-scroll-event-和-getBoundingClientRect-实现" class="headerlink" title="使用 scroll event 和 getBoundingClientRect 实现"></a>使用 scroll event 和 getBoundingClientRect 实现</h3><blockquote>
<p>将 img 的 src 属性写入 data-src，监听页面滚动事件，当图片可以看见时（img 元素顶部距离视窗顶部距离小于视窗高度），则加载<br>data-src 中的图片路径。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;./xxx.png&quot;</span> <span class="attr">alt</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;./xxx.png&quot;</span> <span class="attr">alt</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelectAll</span>(<span class="string">&#x27;img&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">window</span>.<span class="title function_">addEventLisener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		imgs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> imgTop = img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">if</span> (imgTop &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">const</span> data_src = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">				img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, data_src)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-IntersectionObserver-实现"><a href="#使用-IntersectionObserver-实现" class="headerlink" title="使用 IntersectionObserver 实现"></a>使用 IntersectionObserver 实现</h3><blockquote>
<p><strong>IntersectionObserver</strong>是浏览器提供的函数，交叉观察，当目标元素和可视窗口出现交叉区域时，触发事件会触发两次，目标元看见或看不见都会触发</p>
</blockquote>
<h2 id="浏览器请求"><a href="#浏览器请求" class="headerlink" title="浏览器请求"></a>浏览器请求</h2><h3 id="XHR"><a href="#XHR" class="headerlink" title="XHR"></a>XHR</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 初始化链接</span></span><br><span class="line">xhr.<span class="title function_">open</span>(method, url, <span class="keyword">async</span>)</span><br><span class="line"><span class="comment">// 发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>(data)</span><br><span class="line"><span class="comment">// 接收统计</span></span><br><span class="line">xhr.<span class="property">readyStatus</span> <span class="comment">//0-尚未调用open,1-已经open,2-已经send,3-已接收请求,4-请求以完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收回调</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (xhr.<span class="property">readyStatus</span> === <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">			<span class="comment">// 请求成功</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置超时</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">1000</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><h4 id="1-默认不带-cookie"><a href="#1-默认不带-cookie" class="headerlink" title="1.默认不带 cookie"></a>1.默认不带 cookie</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://domain/service&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">	<span class="attr">credentials</span>: <span class="string">&#x27;same-origin&#x27;</span>, <span class="comment">// include可以通榆发送，&#x27;same-origin&#x27;只能同域发送</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2-错误不会-reject"><a href="#2-错误不会-reject" class="headerlink" title="2.错误不会 reject"></a>2.错误不会 reject</h4><h4 id="3-不支持超时设置"><a href="#3-不支持超时设置" class="headerlink" title="3.不支持超时设置"></a>3.不支持超时设置</h4><h4 id="4-中止-fetch（借用-AbortController）"><a href="#4-中止-fetch（借用-AbortController）" class="headerlink" title="4.中止 fetch（借用 AbortController）"></a>4.中止 fetch（借用 AbortController）</h4><h2 id="Http-缓存"><a href="#Http-缓存" class="headerlink" title="Http 缓存"></a>Http 缓存</h2><blockquote>
<p>缓存的原理是首次请求之后保存一份请求资源的<strong>响应副本</strong>，如果判断缓存命中则拦截请求，将之前存储的<strong>响应副本</strong>返回给用户，从而避免重新发起资源请求</p>
</blockquote>
<p>HTTP 缓存可细分为<strong>强制缓存</strong>和<strong>协商缓存</strong>，二者最大区别是是否需要向服务器<strong>询问</strong>从而决定是否发起请求。<br><a href="https://img.tg/image/OmRj36"><img data-src="https://ooo.0x0.ooo/2024/04/11/OmRj36.md.png" alt="OmRj36.md.png"></a></p>
<h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p>无脑按时间判断是否需要更新，不判断服务器端文件是否更新</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>基于 last-modified 实现</p>
<ol>
<li>首先在服务器端读出修改时间</li>
<li>将读出来的时间赋给响应头的 last-modified 字段</li>
<li>最后设置 Cache-control：no-cache</li>
</ol>
<h3 id="Etag-实现"><a href="#Etag-实现" class="headerlink" title="Etag 实现"></a>Etag 实现</h3><p>hash 实现</p>
<ol>
<li>第一次请求时候，服务器端将要返回给客户端的数据通过 Etag 模块进行 hash 生成字符串，这个字符串类似于<em>文件指纹</em></li>
<li>第二次请求是，客户端从缓存读取上一次返回的 Etag，并赋给请求头 if-None-Match 字段</li>
<li>服务器端监测 if-None-Match 字段的值与第一步计算的是否一致，一致则返回 304</li>
<li>如果不一致则返回 etag 标头和 Cache-Control：no-cache</li>
</ol>
<h3 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h3><p>精确度 etag 高<br>耗时 last-modified 更快<br>服务器优先选择 etag</p>
]]></content>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/posts/63534.html</url>
    <content><![CDATA[<p>test</p>
]]></content>
  </entry>
  <entry>
    <title>vue-cli 详解</title>
    <url>/posts/38044.html</url>
    <content><![CDATA[<blockquote>
<p><strong>vue-cli</strong></p>
<ul>
<li>基础:用于生成项目文件体系的搭建 + 用户交互</li>
<li>metadata 配置(元数据)</li>
<li>parser &amp; render</li>
</ul>
</blockquote>
<h2 id="vue-cli-2-x-x"><a href="#vue-cli-2-x-x" class="headerlink" title="vue-cli_2.x.x"></a>vue-cli_2.x.x</h2><h3 id="bin-vue-init-前置工作"><a href="#bin-vue-init-前置工作" class="headerlink" title="&#x2F;bin&#x2F;vue-init 前置工作"></a>&#x2F;bin&#x2F;vue-init 前置工作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载远程仓库 =&gt; 远程拉去github内的配置</span></span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>)</span><br><span class="line"><span class="comment">// 命令行处理工具</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="comment">// node下的文件操作系统中的existsSync - 监测是否存在该路径</span></span><br><span class="line"><span class="keyword">const</span> exists = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">existsSync</span></span><br><span class="line"><span class="comment">// node自带的拼接路径的模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="comment">// 命令行中的加载效果</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取用户根目录</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;user-home&#x27;</span>)</span><br><span class="line"><span class="comment">// 绝对路径替换为波浪号</span></span><br><span class="line"><span class="keyword">const</span> tildify = <span class="built_in">require</span>(<span class="string">&#x27;tildify&#x27;</span>)</span><br><span class="line"><span class="comment">// 高亮</span></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="comment">// **important** 用户与脚本命令行的交互 | 面试</span></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="comment">// rm -rf js版本</span></span><br><span class="line"><span class="keyword">const</span> rm = <span class="built_in">require</span>(<span class="string">&#x27;rimraf&#x27;</span>).<span class="property">sync</span></span><br></pre></td></tr></table></figure>

<h4 id="面试题：如何使用本地模板，预设模板-而不是-github？"><a href="#面试题：如何使用本地模板，预设模板-而不是-github？" class="headerlink" title="面试题：如何使用本地模板，预设模板 而不是 github？"></a>面试题：如何使用本地模板，预设模板 而不是 github？</h4><p>使用 <strong>–offline</strong></p>
<h4 id="如何获取用户参数"><a href="#如何获取用户参数" class="headerlink" title="如何获取用户参数"></a>如何获取用户参数</h4><blockquote>
<p>vue init webpack zhaowa-app</p>
</blockquote>
<p>program.args[0] &#x3D;&gt; ‘webpack’<br>&#x2F;&#x2F; 是否包含斜杠 &#x3D;&gt; 路径层级 &#x3D;&gt;非默认预制模板<br>const hasSlash &#x3D; template.indexOf(‘&#x2F;‘)&gt;-1</p>
<p>&#x2F;&#x2F; 项目名称<br>rawName &#x3D; program.args[1]</p>
<p>&#x2F;&#x2F;输入是否为空 &#x3D;&gt; 是否以当前文件目录作为项目根目录<br>const inPlace &#x3D; !rawName || ‘.’</p>
<p>&#x2F;&#x2F;调整当前目录作为构建目录的根路径<br>const name &#x3D; inPlace ….</p>
<p>&#x2F;&#x2F;本地目录模板仓库路径拼接 &#x2F;zhaowa&#x2F;.vue-templates&#x2F;webpack<br>const tmp &#x3D; path.join(home,’…’)</p>
<h3 id="lib-generate-js"><a href="#lib-generate-js" class="headerlink" title="&#x2F;lib&#x2F;generate.js"></a>&#x2F;lib&#x2F;generate.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态网页文件生成器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Metalsmith</span></span><br><span class="line"><span class="comment">// 模板引擎</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Handlebars</span></span><br><span class="line"><span class="comment">// 多条件匹配工具</span></span><br><span class="line"><span class="keyword">const</span> multimatch</span><br></pre></td></tr></table></figure>

<h3 id="lib-ask-js"><a href="#lib-ask-js" class="headerlink" title="&#x2F;lib&#x2F;ask.js"></a>&#x2F;lib&#x2F;ask.js</h3><p>解析传进来的模板有哪些要询问的</p>
<p>inquirer.prompt</p>
<h3 id="lib-filter-js-过滤不需要的"><a href="#lib-filter-js-过滤不需要的" class="headerlink" title="&#x2F;lib&#x2F;filter.js 过滤不需要的"></a>&#x2F;lib&#x2F;filter.js 过滤不需要的</h3><h2 id="vue-cli-3-x-x"><a href="#vue-cli-3-x-x" class="headerlink" title="vue-cli_3.x.x"></a>vue-cli_3.x.x</h2><h3 id="lib-create-js"><a href="#lib-create-js" class="headerlink" title="&#x2F;lib&#x2F;create.js"></a>&#x2F;lib&#x2F;create.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> creator = <span class="keyword">new</span> <span class="title class_">Creator</span>(name, targetDir, <span class="title function_">getPromptModules</span>())</span><br><span class="line"><span class="keyword">await</span> creator.<span class="title function_">create</span>(options)</span><br></pre></td></tr></table></figure>

<h3 id="lib-Creator-js"><a href="#lib-Creator-js" class="headerlink" title="&#x2F;lib&#x2F;Creator.js"></a>&#x2F;lib&#x2F;Creator.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">Creator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>用户创建指令 -&gt; 创建参数解析 -&gt; 加载模板(远端&#x2F;本地) – prompts –&gt; 处理文件路径 -&gt; 文件层级处理 -&gt; 文件模板渲染(plugins) -&gt; 产出包</p>
<p>如何书写 node 脚本工具</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3.x 源码</title>
    <url>/posts/54268.html</url>
    <content><![CDATA[<h2 id="vue2-存在的问题"><a href="#vue2-存在的问题" class="headerlink" title="vue2 存在的问题"></a>vue2 存在的问题</h2><ul>
<li>代码结构：以整体的包为形式存在</li>
<li>性能优化的空间：ObjectDefineProperty 对象的方法，要对数组进行操作的话需要再自己封装一层，且所有值都是响应式的(性能损耗)</li>
<li>选项式的配置模式：不好维护庞大的项目，可维护性</li>
<li>浏览器真的需要老版本吗</li>
</ul>
<h2 id="vue3-的问题"><a href="#vue3-的问题" class="headerlink" title="vue3 的问题"></a>vue3 的问题</h2><ul>
<li>太多的 <strong>breaking changes</strong> 太多不兼容的内容</li>
<li>生态影响</li>
<li>发布节奏太快<span id="more"></span></li>
<li><a href="#vue2-%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98">vue2 存在的问题</a></li>
<li><a href="#vue3-%E7%9A%84%E9%97%AE%E9%A2%98">vue3 的问题</a></li>
<li><a href="#vue3-%E7%9A%84%E4%BC%98%E5%8C%96">vue3 的优化</a><ul>
<li><a href="#%E7%BB%93%E6%9E%84%E4%B8%8A%E7%9A%84%E4%BC%98%E5%8C%96---monorepo">结构上的优化 - monorepo</a></li>
<li><a href="#%E6%80%A7%E8%83%BD%E4%B8%8A%E7%9A%84%E4%BC%98%E5%8C%96">性能上的优化</a></li>
<li><a href="#%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96">编译优化</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%E4%BC%98%E5%8C%96">数据劫持优化</a></li>
</ul>
</li>
<li><a href="#%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91">模板编译</a></li>
<li><a href="#%E5%9F%BA%E4%BA%8E-proxy-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F">基于 proxy 的响应式</a></li>
<li><a href="#%E6%89%8B%E5%86%99-definereactive">手写 defineReactive</a></li>
</ul>
<h2 id="vue3-的优化"><a href="#vue3-的优化" class="headerlink" title="vue3 的优化"></a>vue3 的优化</h2><h3 id="结构上的优化-monorepo"><a href="#结构上的优化-monorepo" class="headerlink" title="结构上的优化 - monorepo"></a>结构上的优化 - monorepo</h3><p>原子结构 可独立拆分引用 &#x3D;&gt; 可做业务上的拆分</p>
<h3 id="性能上的优化"><a href="#性能上的优化" class="headerlink" title="性能上的优化"></a>性能上的优化</h3><ul>
<li><p>移除了很多使用率低的 api</p>
</li>
<li><p><strong>tree-shaking</strong> &#x3D;&gt; 产物打包优化</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> components <span class="keyword">from</span> <span class="string">&#x27;components&#x27;</span></span><br><span class="line"><span class="comment">//components.input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; input &#125; <span class="keyword">from</span> <span class="string">&#x27;components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h3><p>compile 阶段对静态的模板进行分析 &#x3D;&gt; 分析树 &lt;&#x3D; PatchFlag</p>
<h3 id="数据劫持优化"><a href="#数据劫持优化" class="headerlink" title="数据劫持优化"></a>数据劫持优化</h3><p><strong>vue2.x</strong><br><em>object.defineProperty</em></p>
<ol>
<li>无法检测对象属性的增加和删除 &#x3D;&gt; $set $delete</li>
<li>数组 &#x3D;&gt; push pop…</li>
<li>层级较深 &#x3D;&gt; 递归遍历</li>
</ol>
<p><strong>vue3.x</strong><br>proxy &#x3D;&gt; 底层优化</p>
<h2 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h2><ol>
<li>词法分析阶段(baseParse)：template &#x3D;&gt; AST(抽象语法树)</li>
<li>指令和语法的转化阶段(transform)：AST &#x3D;&gt; 解析不同的节点进行区分 &#x3D;&gt; 不同类型的转换</li>
<li>可执行函数的生成阶段(generator)：转化后 AST 生成渲染函数</li>
</ol>
<ul>
<li>主编译入口：core&#x2F;packages&#x2F;compiler-core&#x2F;src&#x2F;index.ts</li>
</ul>
<h2 id="基于-proxy-的响应式"><a href="#基于-proxy-的响应式" class="headerlink" title="基于 proxy 的响应式"></a>基于 proxy 的响应式</h2><ol>
<li>数据劫持 | 数据响应：检测数据变化 &#x3D;&gt; 函数监听化执行</li>
<li>依赖收集 (effect)<ul>
<li>当前 vm 实例上挂载 effect &#x3D;&gt; 当前 activeEffect 切换为 effect &#x3D;&gt; 在 effect 上创建 deps 等属性用于传递依赖</li>
<li>结合 1+2 变量访问 &#x3D;&gt; 触发对应的 get() &#x3D;&gt; 创建 deps 对象(targetMap) &#x3D;&gt; tagetMap 中的 Deps 可以作为属性进行添加(depsMap)</li>
<li>depsMap 会被添加 activeEffect - 被收集的订阅方 activeEffect 中也同时存在 deps 数组中用于存放关联方的 depsMap - 订阅者</li>
</ul>
</li>
<li>派发更新 ref<ol>
<li>依赖的 set()被触发 &#x3D;&gt; Reflect.set()修改对应属性 &#x3D;&gt; 获取到 targetMap 订阅方(depsMap) &#x3D;&gt; 链条传递 &#x3D;&gt; 触发渲染</li>
</ol>
</li>
</ol>
<ul>
<li>主响应式入口&#x2F;core&#x2F;packages&#x2F;reactivity&#x2F;src&#x2F;index.ts</li>
</ul>
<h2 id="手写-defineReactive"><a href="#手写-defineReactive" class="headerlink" title="手写 defineReactive"></a>手写 defineReactive</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> data = options.<span class="property">data</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">_data</span> = data</span><br><span class="line"></span><br><span class="line">		<span class="comment">//数据劫持</span></span><br><span class="line">		<span class="title function_">_proxy</span>(<span class="variable language_">this</span>, <span class="string">&#x27;_data&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//核心逻辑</span></span><br><span class="line">		<span class="title function_">observe</span>(data)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">Watch</span>(</span><br><span class="line">			<span class="variable language_">this</span>,</span><br><span class="line">			<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> data.<span class="property">name</span> + <span class="string">&#x27;创建响应式&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch cb:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _proxy = <span class="keyword">function</span> (<span class="params">vm, sourceKey, data</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line"></span><br><span class="line">	keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">			<span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> vm[sourceKey][key]</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">				vm[sourceKey][key] = val</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observe = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">Observe</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observe</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">walk</span>(data)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">		<span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">let</span> val = obj[key]</span><br><span class="line">			<span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line"></span><br><span class="line">			<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">				<span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;依赖收集&#x27;</span>)</span><br><span class="line">					dep.<span class="title function_">depend</span>()</span><br><span class="line">					<span class="keyword">return</span> val</span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;派发更新&#x27;</span>)</span><br><span class="line">					val = newVal</span><br><span class="line">					dep.<span class="title function_">notify</span>()</span><br><span class="line">				&#125;,</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">id</span> = <span class="title class_">Dep</span>.<span class="property">uid</span>++</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">			<span class="title class_">Dep</span>.<span class="property">target</span>.<span class="title function_">addDep</span>(<span class="variable language_">this</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">sub</span>) =&gt;</span> sub.<span class="title function_">update</span>())</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">removeSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> subIndex = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">indexOf</span>(sub)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">splices</span>(subIndex, <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">uid</span> = <span class="number">0</span></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watch</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">vm, render, cb</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">render</span> = render</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">deps</span> = []</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">depsIds</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">newDeps</span> = []</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">newDepsIds</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="title class_">Dep</span>.<span class="property">taget</span> = <span class="variable language_">this</span></span><br><span class="line">		<span class="comment">//重置</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">newDeps</span> = []</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">newDepsIds</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line">		<span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">deps</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">oldDep</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> notExistInNewDeps = !<span class="variable language_">this</span>.<span class="property">newDepsIds</span>.<span class="title function_">has</span>(oldDep.<span class="property">id</span>)</span><br><span class="line">			<span class="keyword">if</span> (notExistInNewDeps) &#123;</span><br><span class="line">				oldDep.<span class="title function_">removeSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">deps</span> = <span class="variable language_">this</span>.<span class="property">newDeps</span></span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">depsIds</span> = <span class="variable language_">this</span>.<span class="property">newDepsIds</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> value</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">addDep</span>(<span class="params">dep</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> depId = dep.<span class="property">id</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">newDepsIds</span>.<span class="title function_">has</span>(depId)) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">newDeps</span>.<span class="title function_">push</span>(dep)</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">newDepsIds</span>.<span class="title function_">add</span>(depId)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">depsIds</span>.<span class="title function_">has</span>(depId)) &#123;</span><br><span class="line">				dep.<span class="title function_">addSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">		<span class="variable language_">this</span>.<span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2.x 源码</title>
    <url>/posts/5805.html</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p><strong>面试</strong>：观察者模式 &amp; 发布订阅<br>观察者模式：(观察者，被观察者) 中心一对多 + 系统单点的灵活和拓展<br>发布订阅：(发布者，订阅者，发布订阅中心) 调度中心 &#x3D;&gt; 将注册列表<em>遍历</em>然后发布给订阅者</p>
</blockquote>
<p>view -&gt; listner&#x2F;binding&#x2F;处理内容 -&gt; model</p>
<blockquote>
<p><strong>追问</strong>：要实现这些方式，如何双向绑定</p>
</blockquote>
<pre><code>数据监听器Observe     &lt;----     mvvm
            |                    |
            |                    |
            V                    |
通知数据变化Dep                   |
            | ↑                  |
            | 添加订阅            |
            V |                  |
连接双方的桥梁watcher&lt;---   代码生成(指令归纳)
            |          |         |
            |   绑定函数/订阅数据  |
         更新视图       |         |
            |           -------- |
            V                    V
           view   &lt;—更新视图—  compiler
</code></pre>
<p>源码 -&gt; 原理 -&gt; 他人源码思路</p>
<span id="more"></span>

<ul>
<li><a href="#%E5%BC%95%E8%A8%80">引言</a></li>
<li><a href="#vue2-%E6%BA%90%E7%A0%81">vue2 源码</a><ul>
<li><a href="#%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84">源码结构</a><ul>
<li><a href="#compiler">compiler</a></li>
<li><a href="#core">core</a></li>
<li><a href="#platforms">platforms</a></li>
<li><a href="#shared">shared</a></li>
<li><a href="#types">types</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="vue2-源码"><a href="#vue2-源码" class="headerlink" title="vue2 源码"></a>vue2 源码</h1><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><h3 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h3><h3 id="core"><a href="#core" class="headerlink" title="core"></a>core</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="comment">// 初始化全局入口</span></span><br><span class="line"><span class="title function_">initGlobalAPI</span>(<span class="variable constant_">VUE</span>)</span><br></pre></td></tr></table></figure>

<h3 id="platforms"><a href="#platforms" class="headerlink" title="platforms"></a>platforms</h3><h3 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h3><h3 id="types"><a href="#types" class="headerlink" title="types"></a>types</h3>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue进阶</title>
    <url>/posts/10922.html</url>
    <content><![CDATA[<span id="more"></span>

<ul>
<li><a href="#vue-%E8%BF%9B%E9%98%B6">vue 进阶</a><ul>
<li><a href="#%E7%89%B9%E5%BE%81%E4%B8%80%E6%A8%A1%E5%9D%97%E5%8C%96--vue-template-compiler-%E7%BC%96%E8%AF%91%E6%80%81%E6%8A%8A-template-%E8%BD%AC%E6%8D%A2%E6%88%90-render">特征一：模块化 &#x3D;&gt; vue-template-compiler （编译态把 template 转换成 render()）</a><ul>
<li><a href="#%E6%8F%92%E6%A7%BD---%E9%9D%A2%E8%AF%95%E8%80%83%E5%AF%9F%E7%82%B9--%E5%AF%B9%E6%AF%94%E5%BD%A2%E5%BC%8F">插槽 - 面试考察点 &#x3D;&gt; 对比形式</a><ul>
<li><a href="#%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD">默认插槽</a></li>
<li><a href="#%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD">具名插槽</a></li>
<li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD">作用域插槽</a></li>
</ul>
</li>
<li><a href="#%E6%A8%A1%E6%9D%BF%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%8A%A0%E5%B7%A5">模板的二次加工</a></li>
<li><a href="#jsx-%E6%9B%B4%E8%87%AA%E7%94%B1%E7%9A%84-all-in-js">jsx 更自由的 all in js</a></li>
</ul>
</li>
<li><a href="#%E7%89%B9%E5%BE%81%E4%BA%8C%E7%BB%84%E4%BB%B6%E5%8C%96">特征二：组件化</a><ul>
<li><a href="#%E6%B7%B7%E5%85%A5-mixin---%E9%80%BB%E8%BE%91%E6%B7%B7%E5%85%A5">混入 mixin - 逻辑混入</a></li>
<li><a href="#%E7%BB%A7%E6%89%BF%E6%8B%93%E5%B1%95-extends---%E9%80%BB%E8%BE%91%E4%B8%8A%E7%9A%84%E5%85%B1%E5%90%8C%E6%8B%93%E5%B1%95">继承拓展 extends - 逻辑上的共同拓展</a></li>
<li><a href="#%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F">插件系统</a></li>
<li><a href="#vue-3---compositionapi">Vue 3 - compositionAPI</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="vue-进阶"><a href="#vue-进阶" class="headerlink" title="vue 进阶"></a>vue 进阶</h1><h2 id="特征一：模块化-vue-template-compiler-（编译态把-template-转换成-render-）"><a href="#特征一：模块化-vue-template-compiler-（编译态把-template-转换成-render-）" class="headerlink" title="特征一：模块化 &#x3D;&gt; vue-template-compiler （编译态把 template 转换成 render()）"></a>特征一：模块化 &#x3D;&gt; vue-template-compiler （编译态把 template 转换成 render()）</h2><h3 id="插槽-面试考察点-对比形式"><a href="#插槽-面试考察点-对比形式" class="headerlink" title="插槽 - 面试考察点 &#x3D;&gt; 对比形式"></a>插槽 - 面试考察点 &#x3D;&gt; 对比形式</h3><h4 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h4><p>组件外部维护参数与结构，内部安排位置摆放</p>
<ul>
<li>追问 &#x3D;&gt; 默认插槽的实现方式》 &#x3D;&gt; 插槽聚合（渲染在一个地方 顺序渲染）</li>
<li>追问 &#x3D;&gt; 多个插槽会以何种形态渲染（合并） &#x3D;&gt; 如何放在不同的地方?</li>
</ul>
<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>用 name 表示当前身份，从而在组件内部区分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template v-<span class="attr">slot</span>:header&gt;&#123;&#123;header&#125;&#125;&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span>&#123;&#123;header&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>具名插槽可以在指定位置分开布局 &#x3D;&gt; 原理：name 索引了一段单个解析的命名空间，node 独立由这个单个解析空间进行渲染</li>
<li>追问 &#x3D;&gt; 以 node 渲染为单位 &#x3D;&gt; 混合式传参？</li>
</ul>
<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template slot=<span class="string">&quot;content&quot;</span> slot-scope=<span class="string">&quot;&#123;slotProps&#125;&quot;</span>&gt;&#123;&#123;slotProps&#125;&#125; - &#123;&#123;others&#125;&#125;&lt;/template&gt;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:slotProps</span>=<span class="string">&#123;&#123;slotProps&#125;&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">slotProps</span>:<span class="string">&#x27;slot props&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>外部可以做结构勾勒和参数合并，内部也可以提供参数混合</p>
<ul>
<li>父子参数共同向 slot 传递</li>
</ul>
<h3 id="模板的二次加工"><a href="#模板的二次加工" class="headerlink" title="模板的二次加工"></a>模板的二次加工</h3><ol>
<li>watch | computed &#x3D;&gt; 配置里声明和书写</li>
<li>其余方法：<br>a. 函数 - 过滤器 | 独立管道符 &#x3D;&gt; 管道符和函数有什么区别？| 管道符能拿到实例嘛？ (<strong>不能！</strong>)<br>b. v-html &#x3D;&gt; 递归调用渲染 node &#x3D;&gt; 安全性风险<br>c. 利用组件形式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤器</span></span><br><span class="line"><span class="comment">// template</span></span><br><span class="line">&lt;p&gt;&#123;&#123;money | moneyFilter&#125;&#125;&lt;/p&gt;</span><br><span class="line"><span class="comment">// script</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">filters</span>:&#123;</span><br><span class="line">  <span class="title function_">moneyFilter</span>(<span class="params">param</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> param &gt; <span class="number">99</span> ? <span class="number">99</span> : param</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jsx-更自由的-all-in-js"><a href="#jsx-更自由的-all-in-js" class="headerlink" title="jsx 更自由的 all in js"></a>jsx 更自由的 all in js</h3><ul>
<li>面试题：<ol>
<li>语法糖的实现</li>
<li>jsx 的优点和劣势<ol>
<li>vue 编译：（_beforeMount_）template &#x3D;&gt; render() &#x3D;&gt; （_Mounted_）vm.render()</li>
<li>template 编译，带有 dom 渲染优化，性能节约</li>
<li>直接写 render 函数不受 vue 语法限制，不依赖于 vue 的 api</li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="特征二：组件化"><a href="#特征二：组件化" class="headerlink" title="特征二：组件化"></a>特征二：组件化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;component&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;&lt;/h1&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">	<span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><ol>
<li>抽象复用</li>
</ol>
</li>
<li><ol start="2">
<li>精简 &amp; 聚合</li>
</ol>
</li>
</ul>
<h3 id="混入-mixin-逻辑混入"><a href="#混入-mixin-逻辑混入" class="headerlink" title="混入 mixin - 逻辑混入"></a>混入 mixin - 逻辑混入</h3><ul>
<li><ol>
<li>应用：公共逻辑功能的继承</li>
</ol>
</li>
<li><ol start="2">
<li>面试：合并策略 生命周期</li>
</ol>
<ul>
<li>变量补充形式上 &#x3D;&gt; 额外补充、不会覆盖</li>
<li>生命周期 &#x3D;&gt; minxin 在引用该 mixin 组件之前执行</li>
<li>同样引用的两个 mixin &#x3D;&gt; 根据引用顺序安排加载顺序</li>
</ul>
</li>
</ul>
<h3 id="继承拓展-extends-逻辑上的共同拓展"><a href="#继承拓展-extends-逻辑上的共同拓展" class="headerlink" title="继承拓展 extends - 逻辑上的共同拓展"></a>继承拓展 extends - 逻辑上的共同拓展</h3><ul>
<li><ol>
<li>核心逻辑的继承</li>
</ol>
</li>
<li><ol start="2">
<li>合并策略</li>
</ol>
<ul>
<li>不会覆盖</li>
<li>生命周期 &#x3D;&gt; 不论是业务代码还是 mixin 都在 extents 生命周期之后</li>
<li>只有一个</li>
</ul>
</li>
</ul>
<h3 id="插件系统"><a href="#插件系统" class="headerlink" title="插件系统"></a>插件系统</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> element <span class="keyword">from</span> <span class="string">&#x27;element&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue.use(element)</span></span><br><span class="line"><span class="title function_">createApp</span>(app).<span class="title function_">use</span>(element, &#123;</span><br><span class="line">	<span class="attr">isA</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; install:(()=&gt;&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.prototype.$abc =&gt; this.$abc</span></span><br><span class="line"><span class="comment">// app.globalProperties.$abc</span></span><br></pre></td></tr></table></figure>

<h3 id="Vue-3-compositionAPI"><a href="#Vue-3-compositionAPI" class="headerlink" title="Vue 3 - compositionAPI"></a>Vue 3 - compositionAPI</h3>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue 基础 v5</title>
    <url>/posts/45434.html</url>
    <content><![CDATA[<span id="more"></span>

<ul>
<li><a href="#vue-%E5%9F%BA%E7%A1%80">vue 基础</a><ul>
<li><a href="#%E7%90%86%E8%AE%BA">理论</a><ul>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AF%B9-mvvm-%E7%9A%84%E4%BA%86%E8%A7%A3">面试题：对 MVVM 的了解</a></li>
</ul>
</li>
<li><a href="#%E5%86%99%E6%B3%95">写法</a><ul>
<li><a href="#vue-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8-mvvm-%E5%BC%80%E5%8F%91">vue 如何利用 mvvm 开发?</a></li>
</ul>
</li>
<li><a href="#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">生命周期</a><ul>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98vue-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">面试题：vue 的生命周期</a></li>
</ul>
</li>
<li><a href="#%E7%9B%91%E5%90%AC">监听</a><ul>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98computed-%E5%92%8C-watch">面试题：computed 和 watch</a></li>
</ul>
</li>
<li><a href="#%E6%8C%87%E4%BB%A4--%E6%9D%A1%E4%BB%B6">指令 &amp; 条件</a><ul>
<li><a href="#%E6%9D%A1%E4%BB%B6">条件</a></li>
<li><a href="#v-for--v-if-%E5%9C%A8%E5%90%8C%E4%B8%80%E8%8A%82%E7%82%B9%E4%BD%BF%E7%94%A8%E6%97%B6">v-for &amp; v-if 在同一节点使用时</a></li>
<li><a href="#v-model-v-once-v-text-v-html-v-bind">v-model v-once v-text v-html v-bind</a></li>
<li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4">自定义指令</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8B%E4%BB%B6---v-on">事件 - v-on</a><ul>
<li><a href="#%E4%BF%AE%E9%A5%B0%E7%AC%A6">修饰符</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%AE%BE%E8%AE%A1---%E4%B8%BA%E4%BD%95-vue-%E6%8A%8A%E4%BA%8B%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%8A%E8%80%8C%E4%B8%8D%E6%98%AF-js-%E4%B8%AD">事件的设计 - 为何 vue 把事件设计在模板上而不是 js 中</a></li>
</ul>
</li>
<li><a href="#%E7%BB%84%E4%BB%B6%E5%8C%96">组件化</a><ul>
<li><a href="#%E4%B8%80%E8%88%AC%E7%BB%84%E4%BB%B6--%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6--%E6%8F%92%E4%BB%B6">一般组件 + 动态组件 &#x3D;&gt; 插件</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="vue-基础"><a href="#vue-基础" class="headerlink" title="vue 基础"></a>vue 基础</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><h4 id="面试题：对-MVVM-的了解"><a href="#面试题：对-MVVM-的了解" class="headerlink" title="面试题：对 MVVM 的了解"></a>面试题：对 MVVM 的了解</h4><ul>
<li>Web 应用发展史<ol>
<li>语义化模板</li>
<li>MVC - model view controller</li>
<li>MVVM - model view viewModel<ol>
<li>数据本身会通过 model 挂在在 viewModel，vm 会劫持数据并同步至渲染层</li>
<li>视图层发生外部变化，会同样回调给 vw，返回给 model</li>
</ol>
</li>
</ol>
</li>
</ul>
<h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><h4 id="vue-如何利用-mvvm-开发"><a href="#vue-如何利用-mvvm-开发" class="headerlink" title="vue 如何利用 mvvm 开发?"></a>vue 如何利用 mvvm 开发?</h4><p>数据双向绑定</p>
<ol>
<li>利用花括号，构筑了数据与 vm 的双向绑定关系 &#x3D;》 buildTemplate | compile</li>
<li>通过视图绑定监听事件来处理数据 &#x3D;》v-model &#x3D;&#x3D;&#x3D; :value @input &#x3D;&gt; 节点处理流程</li>
</ol>
<p><strong>buildTemplate &#x3D;》 render()</strong></p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="面试题：vue-的生命周期"><a href="#面试题：vue-的生命周期" class="headerlink" title="面试题：vue 的生命周期"></a>面试题：vue 的生命周期</h4><p>创建阶段: beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount &#x3D;&gt; mounted</p>
<p>更新阶段: beforeUpdate &#x3D;&gt; updated</p>
<p>销毁阶段: beforeDestroy &#x3D;》 destroyed</p>
<p><font color=LightSkyBlue>beforeCreate</font>： new Vue() - 创建实例阶段<br><font color=LightSkyBlue>created</font>: data | props | method | computed - 数据创建</p>
<p><font color=orange>beforeMount</font>: vDom(虚拟节点) - 数据操作以及虚拟 dom 的变化 但不能涉及 dom<br><font color=orange>mounted</font>: Dom 更新</p>
<p><font color=CadetBlue>beforeUpdate</font>： vDom - 完成更新，dom 还未更新<br><font color=CadetBlue>updated</font>： dom 完成更新 &#x3D;》 谨慎做更新数据操作</p>
<p><font color=Green>beforeDestroy</font>：实例尚未销毁 - 清空 eventBus setTimeOut<br><font color=Green>destroyed</font>：完全销毁</p>
<p>补充：key &#x3D;》 diff &#x3D;》 dom diff &#x3D;》 节点 id</p>
<h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><h4 id="面试题：computed-和-watch"><a href="#面试题：computed-和-watch" class="headerlink" title="面试题：computed 和 watch"></a>面试题：computed 和 watch</h4><p>相同点：</p>
<ol>
<li><strong>基于 vue 的依赖收集机制</strong>进行采集</li>
<li>都是被依赖的变化所触发，从而进行处理回调</li>
</ol>
<p>不同点：</p>
<ol>
<li>入&#x2F;出：computed 多入单出，watch 单入多出</li>
<li>性能：computed 存在缓存，不收调用次数的性能损耗；watch 只在监听的值变化时，不包含生成 immediate</li>
<li>computed 关注结果，watch 关注过程</li>
</ol>
<p>问：computed 缓存和响应式如何实现的?</p>
<p>完整过程：</p>
<ol>
<li>流程：new Vue() &#x3D;&gt; 初始化 computed(initState) &#x3D;&gt; createComputedGetter(key) &#x3D;&gt; mount</li>
<li>劫持：getter 属性变化区分是否是最新状态 dirty</li>
<li>target depend &lt;&#x3D;&#x3D;&gt; 原值和依赖之间的关系链</li>
</ol>
<h3 id="指令-条件"><a href="#指令-条件" class="headerlink" title="指令 &amp; 条件"></a>指令 &amp; 条件</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>v-if | v-show<br>v-else | v-else-if</p>
<p>v-for</p>
<h4 id="v-for-v-if-在同一节点使用时"><a href="#v-for-v-if-在同一节点使用时" class="headerlink" title="v-for &amp; v-if 在同一节点使用时"></a>v-for &amp; v-if 在同一节点使用时</h4><p>vue2.x v-for 会优先作用<br>vue3.x v-if 总是优先于 v-for</p>
<h4 id="v-model-v-once-v-text-v-html-v-bind"><a href="#v-model-v-once-v-text-v-html-v-bind" class="headerlink" title="v-model v-once v-text v-html v-bind"></a>v-model v-once v-text v-html v-bind</h4><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><h3 id="事件-v-on"><a href="#事件-v-on" class="headerlink" title="事件 - v-on"></a>事件 - v-on</h3><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>.stop .prevent .once .capture .self .passive</p>
<h4 id="事件的设计-为何-vue-把事件设计在模板上而不是-js-中"><a href="#事件的设计-为何-vue-把事件设计在模板上而不是-js-中" class="headerlink" title="事件的设计 - 为何 vue 把事件设计在模板上而不是 js 中"></a>事件的设计 - 为何 vue 把事件设计在模板上而不是 js 中</h4><ol>
<li>模板定位视图绑定的触发源 + 触发源寻找触发事件的逻辑 —— 方便定位</li>
<li>js 与视图绑定解耦 —— 更便于测试隔离</li>
<li>vm 销毁，自动解绑事件 —— 便于回收</li>
</ol>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><h4 id="一般组件-动态组件-插件"><a href="#一般组件-动态组件-插件" class="headerlink" title="一般组件 + 动态组件 &#x3D;&gt; 插件"></a>一般组件 + 动态组件 &#x3D;&gt; 插件</h4>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JS模块化</title>
    <url>/posts/58364.html</url>
    <content><![CDATA[<h1 id="JS-模块化"><a href="#JS-模块化" class="headerlink" title="JS 模块化"></a>JS 模块化</h1><p>本节课是基础和工程化之间的<strong>模块化</strong><br>基础 &#x3D;&gt; <em>模块化</em> &#x3D;&gt; 工程化</p>
<span id="more"></span>

<ul>
<li><a href="#js-%E6%A8%A1%E5%9D%97%E5%8C%96">JS 模块化</a><ul>
<li><a href="#1-%E5%8E%86%E5%8F%B2">1. 历史</a><ul>
<li><a href="#%E8%83%8C%E6%99%AF">背景</a></li>
<li><a href="#%E5%B9%BC%E5%B9%B4%E6%9C%9F%E6%97%A0%E6%A8%A1%E5%9D%97%E5%8C%96">幼年期：无模块化</a></li>
<li><a href="#%E6%88%90%E9%95%BF%E6%9C%9F%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E9%9B%8F%E5%BD%A2---iife%E8%AF%AD%E6%B3%95%E4%BE%A7%E7%9A%84%E5%A4%84%E7%90%86">成长期：模块化的雏形 - IIFE(语法侧的处理)</a><ul>
<li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E6%8A%8A%E6%8E%A7">作用域的把控</a></li>
</ul>
</li>
<li><a href="#%E6%88%90%E7%86%9F%E6%9C%9F">成熟期</a><ul>
<li><a href="#cjs---commonjs">Cjs - commonjs</a></li>
<li><a href="#amd">AMD</a></li>
<li><a href="#cmd-%E8%A7%84%E8%8C%83">CMD 规范</a></li>
<li><a href="#%E5%AE%8C%E5%85%A8%E4%BD%93-esm--es-module">完全体 ESM &#x3D;&gt; ES Module</a></li>
</ul>
</li>
<li><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B">函数式编程</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-历史"><a href="#1-历史" class="headerlink" title="1. 历史"></a>1. 历史</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>JS 最开始定位：简单页面设计支撑 —— 页面的动画+表单提交<br>并无模块化 or 命名空间基础</p>
<p>JS 的模块化需求日益增长</p>
<h3 id="幼年期：无模块化"><a href="#幼年期：无模块化" class="headerlink" title="幼年期：无模块化"></a>幼年期：无模块化</h3><ol>
<li>开始需要页面加载不同的 js 库：动画库、表单库、格式化工具</li>
<li>多种 js 文件被分在不同的文件中</li>
<li>不同的文件又被同一个模板引用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;script src=<span class="string">&#x27;tools.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;map.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 主</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;main.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>追问<br>script 标签的两个参数- async &amp; defer</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;tools.js&#x27;</span> type=<span class="string">&#x27;text/javascript&#x27;</span> <span class="keyword">async</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：<br><strong>普通</strong>：解析到标签，立刻 pending，并且下载执行<br><strong>defer</strong>：解析到标签，开始异步下载，继续往后进行，完成之后开始执行<br><strong>async</strong>：解析到标签，开始异步下载，下载完成之后立刻执行并且阻塞往后解析，执行完成后再继续向下</p>
</blockquote>
<p>问题导向：浏览器渲染原理、同步异步原理、模块化加载原理</p>
<p>问题出现</p>
<ul>
<li>污染全局作用域 &#x3D;&gt; 不利于大型项目的开发与多人团队的构建</li>
</ul>
<h3 id="成长期：模块化的雏形-IIFE-语法侧的处理"><a href="#成长期：模块化的雏形-IIFE-语法侧的处理" class="headerlink" title="成长期：模块化的雏形 - IIFE(语法侧的处理)"></a>成长期：模块化的雏形 - IIFE(语法侧的处理)</h3><h4 id="作用域的把控"><a href="#作用域的把控" class="headerlink" title="作用域的把控"></a>作用域的把控</h4><p>举例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块01</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块02</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">increase</span>()</span><br><span class="line"><span class="title function_">reset</span>()</span><br></pre></td></tr></table></figure>

<p>利用函数的独立作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p><strong>定义的函数 + 立即执行 &#x3D;&gt; 独立的空间</strong><br>初步实现了一个<strong>基础模块</strong></p>
<p>尝试定义一个简单的模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cosnt <span class="variable language_">module</span> =(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">increase</span>:<span class="function">()=&gt;</span>++count;</span><br><span class="line">    <span class="attr">reset</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      count =<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">increase</span>();</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">reset</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 追问：有外部依赖的情况如何优化处理</span></span><br><span class="line"><span class="keyword">const</span> iifeModule = (<span class="function">(<span class="params">dependencyModule,dependencyModule2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count =<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// dependencyModule,dependencyModule2..</span></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">increase</span>:<span class="function">()=&gt;</span>++count;</span><br><span class="line">    <span class="attr">reset</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      count =<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(dependencyModule,dependencyModule2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 揭示模式</span></span><br><span class="line"><span class="keyword">const</span> iifeModule = (<span class="function">(<span class="params">dependencyModule,dependencyModule2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count =<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// dependencyModule,dependencyModule2..</span></span><br><span class="line">  <span class="comment">// 代码块01</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块02</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    increase,</span><br><span class="line">    reset</span><br><span class="line">&#125;)(dependencyModule,dependencyModule2);</span><br><span class="line"><span class="comment">// 返回的是能力 = 使用方的传参 + 本身的逻辑能力 + 依赖能力</span></span><br></pre></td></tr></table></figure>

<ul>
<li>面试方向</li>
<li><ol>
<li>深入模块化实现</li>
</ol>
</li>
<li><ol start="2">
<li>转向框架 jquery vue react 模块组件的实现细节，以及框架原理特征</li>
</ol>
</li>
<li><ol start="3">
<li>转向设计模式 - 注重模块化的设计</li>
</ol>
</li>
</ul>
<h3 id="成熟期"><a href="#成熟期" class="headerlink" title="成熟期"></a>成熟期</h3><h4 id="Cjs-commonjs"><a href="#Cjs-commonjs" class="headerlink" title="Cjs - commonjs"></a>Cjs - commonjs</h4><blockquote>
<p>node.js 指定的标准<br>特征：</p>
</blockquote>
<ul>
<li>通过 module + export 去外暴露接口</li>
<li>通过 require 去调用其他模块</li>
</ul>
<p>模块的<br>dep.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入部分</span></span><br><span class="line"><span class="keyword">const</span> dependencyModule=<span class="built_in">require</span>(<span class="string">&#x27;..dependencyModule&#x27;</span>)</span><br><span class="line"><span class="comment">// 核心逻辑</span></span><br><span class="line"><span class="keyword">let</span> count =<span class="number">0</span>;</span><br><span class="line">  <span class="comment">// dependencyModule,dependencyModule2..</span></span><br><span class="line">  <span class="comment">// 代码块01</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码块02</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露接口部分</span></span><br><span class="line"><span class="comment">//type1</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">increase</span> = increase;</span><br><span class="line"><span class="keyword">export</span>.<span class="property">reset</span> = reset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type2</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  increase,</span><br><span class="line">  reset</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 引入并使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; increase, reset &#125; = <span class="built_in">require</span>(<span class="string">&#x27;dep.js&#x27;</span>)</span><br><span class="line"><span class="title function_">increase</span>()</span><br><span class="line"><span class="title function_">reset</span>()</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>优点：<br>Cjs 服务侧的角度解决了依赖全局污染的问题 + 完全在写法上也实现了主观感受上的模块化</li>
<li>缺点：<br>针对服务端 &#x3D;&gt; 异步</li>
</ul>
</blockquote>
<h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><blockquote>
<p>通过异步加载 + 允许定制回调函数<br>经典的实现框架：<strong>require.js</strong></p>
</blockquote>
<p>新增定义方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过define定义一个模块，然后用require去加载</span></span><br><span class="line"><span class="title function_">define</span>(id, [depends], callback)</span><br><span class="line"><span class="title function_">requiere</span>([<span class="variable language_">module</span>], callback)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;amdModule&#x27;</span>, [<span class="string">&#x27;dependencyModule1&#x27;</span>, <span class="string">&#x27;dependencyModule2&#x27;</span>], <span class="function">(<span class="params">dependencyModule1, dependencyModule2</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 业务逻辑</span></span><br><span class="line">	<span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">	<span class="comment">// dependencyModule,dependencyModule2..</span></span><br><span class="line">	<span class="comment">// 代码块01</span></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 代码块02</span></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">		count = <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;amdModule&#x27;</span>], <span class="function">(<span class="params">amdModule</span>) =&gt;</span> &#123;</span><br><span class="line">	amdModule.<span class="title function_">increase</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>面试题</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;amdModule&#x27;</span>, [], <span class="function">(<span class="params"><span class="built_in">require</span></span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&#x27;./dependencyModule1&#x27;</span>)</span><br><span class="line">	<span class="keyword">const</span> dependencyModule2 = <span class="built_in">require</span>(<span class="string">&#x27;./dependencyModule2&#x27;</span>)</span><br><span class="line">	<span class="comment">// 逻辑...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>面试</strong>：区分 Cjs 和 AMD？手写兼容 Cjs 和 AMD 的模块</p>
<p><strong>UMD</strong><br>优点：解决了服务、客户端异步动态依赖问题<br>缺点：引入成本，未考虑按需加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="title function_">define</span>(<span class="string">&quot;amdModule&quot;</span>, [<span class="string">&quot;dependencyModule1&quot;</span>, <span class="string">&quot;dependencyModule2&quot;</span>], <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  dependencyModule1,</span></span></span><br><span class="line"><span class="params"><span class="function">  dependencyModule2</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// dependencyModule,dependencyModule2..</span></span><br><span class="line">  <span class="comment">// 代码块01</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代码块02</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">export</span>.<span class="property">increase</span> =increase;</span><br><span class="line">  <span class="keyword">export</span>.<span class="property">reset</span> = reset;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    increase,</span><br><span class="line">    reset</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))(</span><br><span class="line">  <span class="comment">// 目标：一次去定位区分Cjs和AMD</span></span><br><span class="line">  <span class="comment">// 1. Cjs factory</span></span><br><span class="line">  <span class="comment">// 2. module module.exports</span></span><br><span class="line">  <span class="comment">// 3. define</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;Object&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span> &amp;&amp; <span class="keyword">typeof</span> define !== <span class="string">&#x27;function&#x27;</span> ? <span class="comment">//是Cjs</span></span><br><span class="line">              <span class="function"><span class="params">factory</span> =&gt;</span> <span class="variable language_">module</span>.<span class="property">exports</span> =&gt; <span class="title function_">factory</span>(<span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span>)</span><br><span class="line">            : <span class="comment">//是AMD</span></span><br><span class="line">              define</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="CMD-规范"><a href="#CMD-规范" class="headerlink" title="CMD 规范"></a>CMD 规范</h4><blockquote>
<p>按需加载<br>主要应用框架：sea.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖就近</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;module&#x27;</span>, <span class="function">(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">let</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;map&#x27;</span>)</span><br><span class="line">	<span class="comment">// ...代码块1</span></span><br><span class="line">	<span class="keyword">if</span> (xxx) &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> depends2 = <span class="built_in">require</span>(<span class="string">&#x27;./dependencyModule2&#x27;</span>)</span><br><span class="line">	<span class="comment">// 代码块2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong>:</p>
<ul>
<li>按需加载，依赖就近</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>1.依赖打包</li>
<li>2.扩大了模块内体积</li>
</ul>
<h4 id="完全体-ESM-ES-Module"><a href="#完全体-ESM-ES-Module" class="headerlink" title="完全体 ESM &#x3D;&gt; ES Module"></a>完全体 ESM &#x3D;&gt; ES Module</h4><blockquote>
<p><strong>走进新时代</strong><br>新增定义：<br>引入 - import<br>导出 - export</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入区域</span></span><br><span class="line"><span class="keyword">import</span> dependencyModule1 <span class="keyword">from</span> <span class="string">&#x27;./dependencyModule1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑处理</span></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	increase,</span><br><span class="line">	reset,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>追问：<br>处理动态异步依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">moduleDependency</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="comment">// ..模块处理</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">await</span> dependencyModule1.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//原生</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./dependencyModule.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">dynamicEsModule</span>) =&gt;</span> &#123;</span><br><span class="line">	dynamicEsModule.<span class="title function_">init</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>优点</p>
<ul>
<li>通过一种最统一的形态整合了所有 js 的模块化</li>
</ul>
<h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetch = <span class="title function_">ajax</span>(method, url, params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = ajax.<span class="title function_">get</span>(url)</span><br><span class="line"><span class="comment">// ajax.post(url)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="title function_">fetch</span>(params)</span><br><span class="line"><span class="comment">// == ajax.get(url)(params)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="title function_">ajax</span>(method)(url)(params)</span><br><span class="line"></span><br><span class="line"><span class="title function_">send</span>(request, fetch)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise规范及应用</title>
    <url>/posts/7303.html</url>
    <content><![CDATA[<h1 id="2023-12-11-Promise-规范及应用"><a href="#2023-12-11-Promise-规范及应用" class="headerlink" title="2023&#x2F;12&#x2F;11 Promise 规范及应用"></a>2023&#x2F;12&#x2F;11 Promise 规范及应用</h1><ul>
<li><a href="#20231211-promise-%E8%A7%84%E8%8C%83%E5%8F%8A%E5%BA%94%E7%94%A8">2023&#x2F;12&#x2F;11 Promise 规范及应用</a><ul>
<li><a href="#1-%E5%BC%82%E6%AD%A5%E7%9A%84%E9%80%BB%E8%BE%91">1 异步的逻辑</a></li>
<li><a href="#2-%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8F%91%E5%B1%95">2 异步的发展</a><ul>
<li><a href="#callback">Callback</a></li>
<li><a href="#promise">Promise</a></li>
<li><a href="#generator">Generator</a></li>
<li><a href="#async--await">async &#x2F; await</a></li>
</ul>
</li>
<li><a href="#3-promise-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3">3 Promise 深入理解</a><ul>
<li><a href="#31-%E5%88%9D%E6%8E%A2-promise">3.1 初探 Promise</a><ul>
<li><a href="#%E8%A7%84%E5%88%99">规则</a></li>
<li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li>
<li><a href="#%E9%97%AE%E9%A2%98">问题</a></li>
</ul>
</li>
<li><a href="#32-promise-%E8%BF%9B%E9%98%B6">3.2 Promise 进阶</a><ul>
<li><a href="#%E8%A7%84%E5%88%99-1">规则</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0">实现</a></li>
<li><a href="#%E9%97%AE%E9%A2%98-1">问题</a></li>
</ul>
</li>
<li><a href="#33-promise-%E7%9A%84%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8">3.3 Promise 的链式调用</a><ul>
<li><a href="#%E8%A7%84%E5%88%99-2">规则</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0-1">实现</a></li>
<li><a href="#%E9%80%89%E8%AF%BBresolvepromise-%E8%A7%84%E8%8C%83">选读：resolvePromise 规范</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0-2">实现</a></li>
</ul>
</li>
<li><a href="#34-promise-%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3">3.4 Promise 的一些理解</a><ul>
<li><a href="#%E9%93%BE%E5%BC%8F%E6%89%A7%E8%A1%8C">链式执行</a></li>
<li><a href="#%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91">手动触发</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="1-异步的逻辑"><a href="#1-异步的逻辑" class="headerlink" title="1 异步的逻辑"></a>1 异步的逻辑</h2><p><img data-src="https://ooo.0x0.ooo/2023/12/07/OARqNM.jpg" alt="OARqNM.jpg"></p>
<blockquote>
<p><strong>宏任务</strong>：script（整体代码）、setTimeout、setInterval、setImmediate、I&#x2F;O、UI rendering<br><strong>微任务</strong>：promise、Object.observe、MutationObserver<br>promise.nextTick &gt; promise.then &gt; setTimeout &gt; setImmediate</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">	<span class="title function_">resolve</span>()</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h2 id="2-异步的发展"><a href="#2-异步的发展" class="headerlink" title="2 异步的发展"></a>2 异步的发展</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般情况</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> bar = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果调用后1000s再拿到bar该如何调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">cb:<span class="built_in">Function</span></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> bar = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">cb</span>(bar)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(res)=&gt;&#123;</span><br><span class="line">  <span class="comment">// res就是想要的bar</span></span><br><span class="line">  <span class="comment">//但是想基于bar的值以后再写新的逻辑只能在这里写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h3><p>当没有 Promise 的时候，大量的异步逻辑回调，都依赖于 callback</p>
<blockquote>
<p>在 node 中大量的:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;a.text&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">	fs.<span class="title function_">readFile</span>(<span class="string">&#x27;a.text&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;a.text&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>应用 -&gt; fetch,webpack</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getData</span> = (<span class="params"></span>) =&gt; <span class="title function_">post</span>(<span class="string">&#x27;xxx/xxxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(&#123; <span class="attr">data</span>: [], url &#125;)</span><br><span class="line">		&#125;, <span class="number">1000</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">let</span> res = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">	<span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">next</span>(<span class="string">&#x27;over&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="async-await"><a href="#async-await" class="headerlink" title="async &#x2F; await"></a>async &#x2F; await</h3><p>异步编程的改进,提供一种不阻塞主线程的情况下,使用同步代码执行异步的逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(&#123; <span class="attr">data</span>: [], url &#125;)</span><br><span class="line">		&#125;, <span class="number">1000</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; <span class="keyword">await</span> <span class="title function_">post</span>(<span class="string">&#x27;xxx/xxx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">run</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;starting&#x27;</span>)</span><br><span class="line">	<span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">getData</span>()</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>()</span><br></pre></td></tr></table></figure>

<h2 id="3-Promise-深入理解"><a href="#3-Promise-深入理解" class="headerlink" title="3 Promise 深入理解"></a>3 Promise 深入理解</h2><h3 id="3-1-初探-Promise"><a href="#3-1-初探-Promise" class="headerlink" title="3.1 初探 Promise"></a>3.1 初探 Promise</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><blockquote>
<ul>
<li><code>Promise</code>是一个构造函数</li>
<li><code>Promise</code>接受一个函数作为参数,这个函数的参数式两个函数(<code>resolve</code>和<code>reject</code>)</li>
<li><code>Promise</code>返回一个对象,这个对象包含一个 then 函数,这个<code>then</code>函数接受两个函数参数</li>
<li><code>Promise</code>的<strong>status</strong>:</li>
<li><ul>
<li><code>pending</code></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>初始状态,可以改变</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>一个<code>Promise</code>在<code>resolve</code>和<code>reject</code>之前都是这个状态</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>可以通过调用<code>resolve</code>或者<code>reject</code>方法,让这个<code>Promise</code>变成<code>fullfilled</code>或者<code>rejected</code>状态</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><code>fulfilled</code></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>不可变状态</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在<code>resolve</code>之后变成这个状态,拥有一个<code>value</code></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><code>rejected</code></li>
</ul>
</li>
<li><ul>
<li><ul>
<li>不可变状态</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在<code>rejected</code>之后变成这个状态,拥有一个 reason</li>
</ul>
</li>
</ul>
</li>
<li><code>then</code>函数</li>
<li><ul>
<li><strong>参数</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li><code>onFulfilled</code>,<code>onRejected</code>必须是函数类型,如果不是,应该被忽略:</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><code>onFulfilled</code>和<code>onRejected</code>的特性</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在 promise 变成<code>fulfilled</code> &#x2F; <code>rejected</code>状态的时候,应该调用<code>onFulfilled</code>或者<code>onRejected</code></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>在 promise 变成<code>fulfilled</code> &#x2F; <code>rejected</code>状态之前,不应该调用</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>只能调用一次</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Lpromise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onFulfilled</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onRejected</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">// pending才是可变状态</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">// pending才是可变状态</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">execute</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Lpromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">	onFulfilled =</span><br><span class="line">		<span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onFulfilled</span><br><span class="line">			: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> data</span><br><span class="line">			  &#125;</span><br><span class="line">	onRejected =</span><br><span class="line">		<span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onRejected</span><br><span class="line">			: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> error</span><br><span class="line">			  &#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">		<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">		<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Lpromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Lpromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">	&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>没有输出了<br>因在执行<code>resolve</code>的时候,<code>then</code>已经执行过了<br>所以要在一个合适的时机,去执行<code>then</code>的<code>onFulfilled</code></p>
<h3 id="3-2-Promise-进阶"><a href="#3-2-Promise-进阶" class="headerlink" title="3.2 Promise 进阶"></a>3.2 Promise 进阶</h3><h4 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h4><blockquote>
<ul>
<li><code>resolve</code>&#x2F;<code>reject</code>执行了之后，再执行<code>onfulfilled</code>和<code>onrejected</code></li>
<li><code>onfulfilled</code>和<code>onrejected</code>应该是微任务</li>
</ul>
</blockquote>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Lpromise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span> = []</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onRejectedArray</span> = []</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">//queueMicrotask 方法用于将一个微任务添加到微任务队列中。微任务是异步执行的任务，它们在宏任务之间插入。</span></span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(reason))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="title function_">execute</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Lpromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">	onFulfilled =</span><br><span class="line">		<span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onFulfilled</span><br><span class="line">			: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> data</span><br><span class="line">			  &#125;</span><br><span class="line">	onRejected =</span><br><span class="line">		<span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onRejected</span><br><span class="line">			: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> error</span><br><span class="line">			  &#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">		<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">		<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">push</span>(onFulfilled)</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">push</span>(onRejected)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://ooo.0x0.ooo/2023/12/11/OAVYUi.png" alt="OAVYUi.png"></p>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>链式调用无法 work</p>
<h3 id="3-3-Promise-的链式调用"><a href="#3-3-Promise-的链式调用" class="headerlink" title="3.3 Promise 的链式调用"></a>3.3 Promise 的链式调用</h3><h4 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h4><blockquote>
<p><strong>then</strong>方法应该返回一个 promise<br><code>promise2 = promise1.then(onFulfilled,onRejected)</code></p>
<ul>
<li><code>onFulfilled</code>&#x2F;<code>onRejected</code>的执行结果为 x 调用<code>resolvePromise</code></li>
<li>如果<code>onFulfilled</code>&#x2F;<code>onRejected</code>执行时抛出异常，我们 promise2 需要被 reject</li>
<li>如果<code>onFulfilled</code>&#x2F;<code>onRejected</code>不是一个函数，promise2 以 promise1 的 valve 或者 reason 触发 fulfilled 和 rejected<br><strong>promise1 中的 onfulfilled 返回了一个值，这个值需要被 promise2 进行 resolve，才能出现在下一个 then(res)。</strong></li>
</ul>
</blockquote>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Lpromise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span> = []</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onRejectedArray</span> = []</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">//queueMicrotask 方法用于将一个微任务添加到微任务队列中。微任务是异步执行的任务，它们在宏任务之间插入。</span></span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(value))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> <span class="title function_">fn</span>(reason))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// try catch</span></span><br><span class="line">	<span class="title function_">execute</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Lpromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">	onFulfilled =</span><br><span class="line">		<span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onFulfilled</span><br><span class="line">			: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> data</span><br><span class="line">			  &#125;</span><br><span class="line">	onRejected =</span><br><span class="line">		<span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onRejected</span><br><span class="line">			: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> error</span><br><span class="line">			  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 实现链式then</span></span><br><span class="line">	<span class="keyword">let</span> promise2</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// old:onFulfilled(this.value);</span></span><br><span class="line">		<span class="comment">// 返回新的Promise</span></span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">queueMicroMask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// promise1中的onfulfilled返回了一个值，是then返回的promise2中需要resolve的</span></span><br><span class="line">					<span class="keyword">let</span> result = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">					<span class="title function_">resolve</span>(result)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// old:onRejected(this.reason);</span></span><br><span class="line">		<span class="comment">// 返回新的Promise</span></span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">queueMicroMask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">let</span> result = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">					<span class="title function_">resolve</span>(result)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// old</span></span><br><span class="line">		<span class="comment">// this.onFulfilledArray.push(onFulfilled);</span></span><br><span class="line">		<span class="comment">// this.onRejectedArray.push(onRejected);</span></span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">let</span> result = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">					<span class="title function_">resolve</span>(result)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">let</span> result = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">					<span class="title function_">resolve</span>(result)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="选读：resolvePromise-规范"><a href="#选读：resolvePromise-规范" class="headerlink" title="选读：resolvePromise 规范"></a>选读：resolvePromise 规范</h4><p><code>resolvePromise(promise2,x,resolve,reject)</code></p>
<ul>
<li>如果 promise2 和 x 相等，那么 reject error;</li>
<li>如果 promise2 是一个 promise<ul>
<li>如果 x 是一个 pending 状态，那么 promise2 必须要再 pending, 直到 x 变成 fulfilled &#x2F; rejected</li>
<li>如果 x 被 fulfilled， fulfill promise with the same value</li>
<li>如果 x 被 rejected， reject promise with the same reason</li>
</ul>
</li>
<li>如果 x 是一个 object 或者 function<ul>
<li>Let thenable &#x3D; x.then</li>
<li>如果 x.then 这一步出错，那么 reject promise with e as the reason</li>
<li>如果 then 是一个函数，then.call(x, resolvePromiseFn, rejectPromiseFn)<ul>
<li>resolvePromiseFn 的入参是 y, 执行 resolvePromise(promise2, y, resolve, reject)</li>
<li>rejectPromiseFn 的入参是 r, reject promise with r</li>
<li>如果 resolvePromiseFn 和 rejectPromiseFn 都调用了，那么第一个调用优先，后面的忽略</li>
<li>如果调用 then 抛出异常<ul>
<li>如果 resolvePromise 或 rejectPromise 已经被调用，可以忽略</li>
</ul>
</li>
<li>如果 then 不是一个 function， fulfill promise with x</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise2, result, resolve, reject</span>) =&gt; &#123;</span><br><span class="line">	<span class="comment">// 当 result 和 promise2 相等时，也就是说 onfulfilled 返回 promise2 时，进行 reject</span></span><br><span class="line">	<span class="keyword">if</span> (result === promise2) &#123;</span><br><span class="line">		<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;error due to circular reference&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 是否已经执行过 onfulfilled 或者 onrejected</span></span><br><span class="line">	<span class="keyword">let</span> consumed = <span class="literal">false</span></span><br><span class="line">	<span class="keyword">let</span> thenable</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (result.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">			result.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">				<span class="title function_">resolvePromise</span>(promise2, data, resolve, reject)</span><br><span class="line">			&#125;, reject)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			result.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> <span class="title function_">isComplexResult</span> = (<span class="params">target</span>) =&gt; (<span class="keyword">typeof</span> target === <span class="string">&#x27;function&#x27;</span> || <span class="keyword">typeof</span> target === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; target !== <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 如果返回的是疑似 Promise 类型</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">isComplexResult</span>(result)) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			thenable = result.<span class="property">then</span></span><br><span class="line">			<span class="comment">// 如果返回的是 Promise 类型，具有 then 方法</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">typeof</span> thenable === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">				thenable.<span class="title function_">call</span>(</span><br><span class="line">					result,</span><br><span class="line">					<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">						<span class="keyword">if</span> (consumed) &#123;</span><br><span class="line">							<span class="keyword">return</span></span><br><span class="line">						&#125;</span><br><span class="line">						consumed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">return</span> <span class="title function_">resolvePromise</span>(promise2, data, resolve, reject)</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">						<span class="keyword">if</span> (consumed) &#123;</span><br><span class="line">							<span class="keyword">return</span></span><br><span class="line">						&#125;</span><br><span class="line">						consumed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">						<span class="keyword">return</span> <span class="title function_">reject</span>(error)</span><br><span class="line">					&#125;</span><br><span class="line">				)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="title function_">resolve</span>(result)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">			<span class="keyword">if</span> (consumed) &#123;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			consumed = <span class="literal">true</span></span><br><span class="line">			<span class="keyword">return</span> <span class="title function_">reject</span>(e)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="title function_">resolve</span>(result)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LPromise</span>(<span class="params">execute</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span> = []</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">onRejectedArray</span> = []</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">func</span>) =&gt;</span> <span class="title function_">func</span>(value))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">		<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">				<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">func</span>) =&gt;</span> <span class="title function_">func</span>(reason))</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// try catch</span></span><br><span class="line">	<span class="title function_">execute</span>(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">LPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">	onFulfilled =</span><br><span class="line">		<span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onFulfilled</span><br><span class="line">			: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> data</span><br><span class="line">			  &#125;</span><br><span class="line">	onRejected =</span><br><span class="line">		<span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">			? onRejected</span><br><span class="line">			: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> error</span><br><span class="line">			  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">let</span> promise2</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// promise1 中 onfulfilled 返回了一个值，这个值需要被 promise2 进行 resolve ，才能出现在下一个 then(res)</span></span><br><span class="line">					<span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">					<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// promise1 中 onfulfilled 返回了一个值，这个值需要被 promise2 进行 resolve ，才能出现在下一个 then(res)</span></span><br><span class="line">					<span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">					<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">onFulfilledArray</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">					<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">onRejectedArray</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// promise1 中 onfulfilled 返回了一个值，这个值需要被 promise2 进行 resolve ，才能出现在下一个 then(res)</span></span><br><span class="line">					<span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">					<span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">					<span class="title function_">reject</span>(e)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-Promise-的一些理解"><a href="#3-4-Promise-的一些理解" class="headerlink" title="3.4 Promise 的一些理解"></a>3.4 Promise 的一些理解</h3><h4 id="链式执行"><a href="#链式执行" class="headerlink" title="链式执行"></a>链式执行</h4><blockquote>
<p>100 个 promise，10 个先执行，每 resolve 一个，加一个进去。形成 stream.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">promiseArrGenerator</span> = (<span class="params">num</span>) =&gt;</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Array</span>(num).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(</span><br><span class="line">		<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="function">() =&gt;</span></span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="title function_">resolve</span>(index)</span><br><span class="line">				&#125;, <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>)</span><br><span class="line">			&#125;)</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">promiseArrGenerator</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map((fn) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     fn().then(console.log)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// Promise.all(arr.map(fn =&gt; fn())).then(res =&gt; console.log(res))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设计一个 promise Chain 链式调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promiseChain</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">	arr.<span class="title function_">reduce</span>(</span><br><span class="line">		<span class="function">(<span class="params">proChain, pro</span>) =&gt;</span></span><br><span class="line">			proChain.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">				~res &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">				<span class="keyword">return</span> <span class="title function_">pro</span>()</span><br><span class="line">			&#125;),</span><br><span class="line">		<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(-<span class="number">1</span>)</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promiseChain</span>(arr)</span><br></pre></td></tr></table></figure>

<h4 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h4><blockquote>
<p>sleep 函数，halk 函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">engine</span> = (<span class="params">cb</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">let</span> _resolve</span><br><span class="line"></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		_resolve = resolve</span><br><span class="line">	&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">cb</span>()</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="attr">start</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">_resolve</span>()</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> e = <span class="title function_">engine</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;engine&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">e.<span class="title function_">start</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端开发</category>
        <category>培训课</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>OOP与继承</title>
    <url>/posts/3835.html</url>
    <content><![CDATA[<h1 id="2023-12-4-OOP-与继承"><a href="#2023-12-4-OOP-与继承" class="headerlink" title="2023&#x2F;12&#x2F;4 OOP 与继承"></a>2023&#x2F;12&#x2F;4 OOP 与继承</h1><ul>
<li>器：工具，JS，VUE，React…</li>
<li>术：用前端做了什么项目。React 设计了什么，针对了什么问题，解决了什么</li>
<li>道：知识体系 -&gt; 以道驭术</li>
</ul>
<span id="more"></span>

<ul>
<li><a href="#2023124-oop%E4%B8%8E%E7%BB%A7%E6%89%BF">2023&#x2F;12&#x2F;4 OOP 与继承</a><ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1object-oriented-programming">什么是面向对象 Object-oriented Programming</a><ul>
<li><a href="#js%E4%B8%AD%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">JS 中的面向对象</a><ul>
<li><a href="#js%E4%B8%AD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95">JS 中创建一个对象，有哪些方法？</a></li>
<li><a href="#__proto__%E6%9C%AC%E8%B4%A8%E6%98%AF%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%85%B3%E7%B3%BB">__proto__本质是原型链关系</a></li>
<li><a href="#new%E5%85%B3%E9%94%AE%E5%AD%97">new 关键字</a></li>
<li><a href="#new%E5%85%B3%E9%94%AE%E5%AD%97%E5%88%B0%E5%BA%95%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88">new 关键字到底干了什么？</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E7%BB%A7%E6%89%BF">继承</a><ul>
<li><a href="#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF">原型继承</a></li>
<li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%BB%A7%E6%89%BF">构造函数继承</a></li>
<li><a href="#%E7%BB%84%E5%90%88%E7%BB%A7%E6%89%BF">组合继承</a></li>
<li><a href="#%E7%BB%84%E5%90%88%E5%AF%84%E7%94%9F%E5%BC%8F%E7%BB%A7%E6%89%BF">组合寄生式继承</a></li>
</ul>
</li>
<li><a href="#qa">Q&amp;A</a><ul>
<li><a href="#%E7%BB%84%E5%90%88%E5%AF%84%E7%94%9F%E5%92%8Cclass%E7%9A%84%E5%8C%BA%E5%88%AB">组合寄生和 class 的区别？</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="什么是面向对象-Object-oriented-Programming"><a href="#什么是面向对象-Object-oriented-Programming" class="headerlink" title="什么是面向对象 Object-oriented Programming"></a>什么是面向对象 Object-oriented Programming</h2><p><strong>Java -&gt; 一切皆对象</strong></p>
<p><strong>类</strong>:1.属性 2.方法<br><u>对象是类的实例化</u></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//面向过程</span></span><br><span class="line"><span class="title function_">init</span>()</span><br><span class="line"><span class="title function_">whitePlay</span>()</span><br><span class="line"><span class="title function_">repaint</span>()</span><br><span class="line"><span class="title function_">check</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//面向对象</span></span><br><span class="line"><span class="keyword">const</span> checkerBoard = <span class="keyword">new</span> <span class="title class_">CheckerBoard</span>()</span><br><span class="line"><span class="keyword">const</span> whitePlayer = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> blackPlayer = <span class="keyword">new</span> <span class="title class_">Player</span>(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">whitePlayer.<span class="title function_">start</span>()</span><br><span class="line">checkerBoard.<span class="title function_">repaint</span>()</span><br><span class="line">checkerBoard.<span class="title function_">check</span>()</span><br><span class="line"></span><br><span class="line">blackPlayer.<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line">whitePlayer.<span class="title function_">rollback</span>()</span><br></pre></td></tr></table></figure>

<h3 id="JS-中的面向对象"><a href="#JS-中的面向对象" class="headerlink" title="JS 中的面向对象"></a>JS 中的面向对象</h3><h4 id="JS-中创建一个对象，有哪些方法？"><a href="#JS-中创建一个对象，有哪些方法？" class="headerlink" title="JS 中创建一个对象，有哪些方法？"></a>JS 中创建一个对象，有哪些方法？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> baz = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;) <span class="comment">//baz.__proto__.__proto__ === Object.prototype</span></span><br><span class="line"><span class="keyword">var</span> bar = &#123;&#125; <span class="comment">//bar.__proto__ === Object.prototype</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Object.prototype</strong><br><img data-src="https://ooo.0x0.ooo/2023/12/04/OATdaG.jpg" alt="OATdaG.jpg"><br><em>Object.prototype</em> 是所有对象的原型对象，所有对象都有这个属性<br>Object.prototype.constructor 指向 Object</p>
</blockquote>
<p>思考：如何用 Object.create 创建一个对象实现 var bar&#x3D;{}一样的效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure>

<h4 id="proto本质是原型链关系"><a href="#proto本质是原型链关系" class="headerlink" title="proto本质是原型链关系"></a><strong>proto</strong>本质是原型链关系</h4><p>JS 这门语言本质设计的时候就是原型链关系<br>A.<strong>proto</strong> &#x3D;&#x3D;&#x3D; B<br>A 上没有的方法就从 B 上找，如果 B 上有我就用 B 的</p>
<h4 id="new-关键字"><a href="#new-关键字" class="headerlink" title="new 关键字"></a>new 关键字</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;L&#x27;</span>, <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.new创建了一个对象，这个对象的原型指向了构造函数的原型</span></span><br><span class="line">p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 2.Person有个原型，原型上有个constructor是Person自己</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span></span><br><span class="line"><span class="comment">// 3.p这个对象是构造函数创造的，p的构造是Person</span></span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Person</span></span><br></pre></td></tr></table></figure>

<h4 id="new-关键字到底干了什么？"><a href="#new-关键字到底干了什么？" class="headerlink" title="new 关键字到底干了什么？"></a>new 关键字到底干了什么？</h4><ul>
<li>创建了一个对象</li>
<li>这个对象的原型指向了这个 Person&#x2F;Function 的 prototype</li>
<li>该对象实现了 Person 的方法</li>
<li>根据一些特定的情况返回对象<ul>
<li>如果这个函数没有返回值，或者返回一个<font color="red">非</font>对象类型,则 new 最后返回创建的这个对象（p）</li>
<li>如果这个构造函数明确返回了一个对象(return{})，则返回这个对象</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现new</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">newFunc</span>(<span class="params">Person, ...rest</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Person</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Person必须是一个函数&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">	<span class="keyword">var</span> result = <span class="title class_">Person</span>.<span class="title function_">apply</span>(obj, rest)</span><br><span class="line">	<span class="keyword">return</span> result &amp;&amp; <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现Object.create</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">p</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (p === <span class="literal">null</span>) <span class="keyword">throw</span> <span class="title class_">TypeError</span>()</span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">create</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(p)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> p !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> p !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="title class_">TypeError</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">	f.<span class="property"><span class="keyword">prototype</span></span> = p</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">f</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承描述类和类之间的关系</p>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = [<span class="string">&#x27;lei&#x27;</span>, <span class="string">&#x27;yu&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.child不传参</span></span><br><span class="line"><span class="comment">// 2.如果Parent有属性是引用类型，一旦修改了所有的都受影响</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">	<span class="comment">//调用Parent函数，并传递当前对象作为参数，以继承Parent函数的属性和方    法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">	<span class="comment">//调用Parent函数，并传递当前对象作为参数，以继承Parent函数的属性和方    法。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 问题：我只想构成一个原型链关系</span></span><br><span class="line">	<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line">	<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合寄生式继承"><a href="#组合寄生式继承" class="headerlink" title="组合寄生式继承"></a>组合寄生式继承</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">	<span class="comment">//调用Parent函数，并传递当前对象作为参数，以继承Parent函数的属性和方    法。</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Child.prototype = Object.create(Parent,prototype)</span></span><br><span class="line">	<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">inherit</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">	<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://ooo.0x0.ooo/2023/12/04/OAnbrC.jpg" alt="OAnbrC.jpg"></p>
<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="组合寄生和-class-的区别？"><a href="#组合寄生和-class-的区别？" class="headerlink" title="组合寄生和 class 的区别？"></a>组合寄生和 class 的区别？</h3><blockquote>
<p>Loose 模式应该差不多,主要是以下区别:<br>Class 继承，会继承静态属性：<br>子类中，必须在 constructor 中调用 super，因为子类自己的 this 对象，必须先通过父类的构造函数完成</p>
</blockquote>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>this指针/闭包/作用域</title>
    <url>/posts/4503.html</url>
    <content><![CDATA[<h1 id="2023-11-26-this指针-闭包-作用域"><a href="#2023-11-26-this指针-闭包-作用域" class="headerlink" title="2023&#x2F;11&#x2F;26 this指针&#x2F;闭包&#x2F;作用域"></a>2023&#x2F;11&#x2F;26 this指针&#x2F;闭包&#x2F;作用域</h1><p><strong>面试时必知必会</strong>  </p>
<ol>
<li>JS</li>
<li>布局</li>
<li>端(小程序、web)</li>
<li>技术栈(Vue、React)</li>
</ol>
<p><strong>争取学习</strong>  </p>
<ol>
<li>辅助技术栈</li>
<li>热门模块和工程化</li>
</ol>
<p><strong>为我所用</strong><br>实战 | 算法 | 模式</p>
<span id="more"></span>
<ul>
<li><a href="#20231126-this%E6%8C%87%E9%92%88%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F">2023&#x2F;11&#x2F;26 this指针&#x2F;闭包&#x2F;作用域</a><ul>
<li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F--%E4%B8%8A%E4%B8%8B%E6%96%87">作用域 &amp; 上下文</a><ul>
<li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE">作用域链</a></li>
<li><a href="#this-%E4%B8%8A%E4%B8%8B%E6%96%87-context">this 上下文 context</a><ul>
<li><a href="#%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8---this%E6%8C%87%E5%90%91%E6%98%AFwindow">函数直接调用 - this指向是window</a></li>
<li><a href="#%E9%9A%90%E5%BC%8F%E7%BB%91%E5%AE%9A---this%E6%8C%87%E5%90%91%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88%E7%9A%84%E4%B8%8A%E4%B8%80%E7%BA%A7">隐式绑定 - this指向调用堆栈的上一级</a></li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a></li>
<li><a href="#%E6%98%BE%E7%A4%BA%E7%BB%91%E5%AE%9Abind--apply--call">显示绑定(bind | apply | call)</a></li>
<li><a href="#new---this%E6%8C%87%E5%90%91new%E4%B9%8B%E5%90%8E%E5%BE%97%E5%88%B0%E7%9A%84%E5%AE%9E%E4%BE%8B">new - this指向new之后得到的实例</a></li>
<li><a href="#%E8%BF%BD%E9%97%AE%E7%B1%BB%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%96%B9%E6%B3%95this%E6%9C%89%E5%8C%BA%E5%88%AB%E5%90%97">追问：类中异步方法，this有区别吗</a></li>
</ul>
</li>
<li><a href="#%E8%BF%BD%E9%97%AE%E5%A6%82%E4%BD%95%E7%AA%81%E7%A0%B4%E4%BD%9C%E7%94%A8%E5%9F%9F">追问：如何突破作用域？</a><ul>
<li><a href="#%E9%97%AD%E5%8C%85%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%92%8C%E5%AE%83%E5%91%A8%E5%9B%B4%E7%8A%B6%E6%80%81%E7%9A%84%E5%BC%95%E7%94%A8%E6%8D%86%E7%BB%91%E5%9C%A8%E4%B8%80%E8%B5%B7%E7%9A%84%E7%BB%84%E5%90%88"><strong>闭包：一个函数和它周围状态的引用捆绑在一起的组合</strong></a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E7%9A%84%E6%97%B6%E5%80%99">函数作为参数的时候</a></li>
<li><a href="#%E5%87%BD%E6%95%B0%E5%B5%8C%E5%A5%97">函数嵌套</a></li>
<li><a href="#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E7%9A%84%E9%97%AD%E5%8C%85">事件处理（异步）的闭包</a></li>
<li><a href="#%E8%BF%BD%E9%97%AE%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0--%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%B5%8C%E5%A5%97--%E6%8B%A5%E6%9C%89%E7%8B%AC%E7%AB%8B%E4%BD%9C%E7%94%A8%E5%9F%9F">追问:立即执行函数 &#x2F; 立即执行嵌套 &#x3D;&gt; 拥有独立作用域</a></li>
<li><a href="#%E9%97%AD%E5%8C%85%E5%AE%9E%E7%8E%B0%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F---%E9%AB%98%E9%A2%91">闭包：实现私有变量 - 高频</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="作用域-上下文"><a href="#作用域-上下文" class="headerlink" title="作用域 &amp; 上下文"></a>作用域 &amp; 上下文</h2><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p><strong>面试题</strong>  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> a= <span class="string">&#x27;global&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">course</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">session</span>()</span><br><span class="line">        fuction <span class="title function_">session</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> c = <span class="string">&#x27;ccc&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="title function_">teacher</span>()</span><br><span class="line">            fuction <span class="title function_">teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">// let d = &#x27;ddd&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//变量提升,提升范围在当前作用域下</span></span><br><span class="line">                <span class="comment">//var存在声明提升和赋值提升，可以提前访问，结果为undefined</span></span><br><span class="line">                <span class="comment">//let仅仅存在声明提升，不会给它初始化，更不会给他赋值，暂时性死区,真正赋值才会初始化</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line">                <span class="keyword">var</span> d = <span class="string">&#x27;yy&#x27;</span></span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//作用域生效</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//作用域向上查找</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">course</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// **************</span></span><br><span class="line">    <span class="comment">//提升优先级 =&gt; 函数需要变量</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xxx)</span><br><span class="line">    <span class="keyword">var</span> xxx =<span class="number">123</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;functionXXX&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xxx)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印结果：</span></span><br><span class="line">    <span class="comment">// ƒ xxx()&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;functionXXX&#x27;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="comment">//1.var xxx</span></span><br><span class="line">    <span class="comment">//2.function xxx()&#123;&#125;</span></span><br><span class="line">    <span class="comment">//3.console.log(xxx)//xxx()</span></span><br><span class="line">    <span class="comment">//4.xxx=123</span></span><br><span class="line">    <span class="comment">//5.console.log(xxx)//123</span></span><br><span class="line">    <span class="comment">//变量和函数同时提升时 </span></span><br><span class="line">    <span class="comment">//提升维度：变量优先  执行维度：函数优先</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ********************</span></span><br><span class="line">    <span class="comment">// 结论：函数是天然的作用域隔离方案 =&gt; 模块化基础</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 1. 对于作用域链 我们可以用创建态去定位链条中的某一环  </span></span><br><span class="line"><span class="string">- 2. 手动取消链条环甚至全局作用域的时候，可以利用块级作用域做性能优化 =&gt; 性能优化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### this 上下文 context  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- this是在执行过程中动态读取的上下文所决定的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">考察重点 - 各**使用态**中的指针指向</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 函数直接调用 - this指向是window  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数内部this&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo</span>()<span class="comment">//打印window</span></span><br></pre></td></tr></table></figure>

<h4 id="隐式绑定-this指向调用堆栈的上一级"><a href="#隐式绑定-this指向调用堆栈的上一级" class="headerlink" title="隐式绑定 - this指向调用堆栈的上一级"></a>隐式绑定 - this指向调用堆栈的上一级</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;隐式绑定&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    fn</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">fn</span> = fn</span><br><span class="line">obj.<span class="title function_">fn</span>()<span class="comment">//打印这个obj,既 &#123;a:1,fn:f&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">    <span class="attr">bar</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//取出</span></span><br><span class="line">    <span class="keyword">let</span> fn1 = foo.<span class="property">fn</span></span><br><span class="line">    <span class="title function_">fn1</span>()<span class="comment">//取出后打印为window，查看执行态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//追问:</span></span><br><span class="line">    <span class="keyword">const</span> o1 = &#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;o1&#x27;</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 直接使用上下文</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o1fn_this&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">text</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> o2 = &#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;o2&#x27;</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o2fn_this&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">            <span class="comment">//调用者还是o1</span></span><br><span class="line">            <span class="keyword">return</span> o1.<span class="title function_">fn</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> o3 = &#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;o3&#x27;</span>,</span><br><span class="line">        <span class="attr">fn</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o3fn_this&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">            <span class="keyword">let</span> fn = o1.<span class="property">fn</span></span><br><span class="line">            <span class="comment">// 找不到调用者，this指向windows</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o1&#x27;</span>,o1.<span class="title function_">fn</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o2&#x27;</span>,o2.<span class="title function_">fn</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;o3&#x27;</span>,o3.<span class="title function_">fn</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果:<br><img data-src="https://ooo.0x0.ooo/2023/11/27/OrDIMi.png" alt="OrDIMi.png"></p>
</blockquote>
<ul>
<li><ol>
<li>在执行函数的时候，函数执行时调用方上一级 &#x3D;&gt; 上下文</li>
</ol>
</li>
<li><ol start="2">
<li>公共函数 | 全局调用 &#x3D;&gt; window</li>
</ol>
</li>
</ul>
<h4 id="显示绑定-bind-apply-call"><a href="#显示绑定-bind-apply-call" class="headerlink" title="显示绑定(bind | apply | call)"></a>显示绑定(bind | apply | call)</h4><ul>
<li><ol>
<li>call &lt; &#x3D; &gt; apply 传参不同 依次传入 &#x2F; 数组传入</li>
</ol>
</li>
<li><ol start="2">
<li>bind 返回值不同</li>
</ol>
</li>
</ul>
<p><strong>面试</strong>：手写apply &amp; bind</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.需求:手写bind =&gt; bind位置 =&gt; Function.prototype =&gt; 原型</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.1 bind原理 改变this</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂存this，因为newBind要指向原函数</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// Array.prototype.slice.call(arguments)能够将具有length属性的arguments转换为数组,  我们可以理解为就是 arguments.toArray().slice()</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">// 获取栈顶，既是shift</span></span><br><span class="line">    <span class="keyword">const</span> newThis = args.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.2返回值不执行 =&gt; 返回函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 新函数传的参数，与bind传入的参数进行拼接</span></span><br><span class="line">        <span class="keyword">const</span> restArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">        <span class="keyword">const</span> allArgs = args.<span class="title function_">concat</span>(restArgs)</span><br><span class="line">        <span class="comment">// 执行核心，原函数执行newApply，但是上下文指向newThis</span></span><br><span class="line">        <span class="comment">//return _this.apply(newThis,allArgs)</span></span><br><span class="line">        <span class="keyword">return</span> _this.<span class="title function_">newApply</span>(newThis,allArgs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.内层实现</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newApply</span> = <span class="keyword">function</span>(<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数检测</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;type error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 参数兜底</span></span><br><span class="line">    context = context || <span class="variable language_">window</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 临时挂载执行函数</span></span><br><span class="line">    <span class="comment">// 根据谁调用指向谁的原则，将this指向赋值给context（newThis）的一个属性上</span></span><br><span class="line">    <span class="comment">// 相当于调用了newThis.fn() 因此上下文为newThis</span></span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="variable language_">arguments</span>[<span class="number">1</span>]<span class="comment">//有值的话说明有参数</span></span><br><span class="line">        ? context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">        : context.<span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="new-this指向new之后得到的实例"><a href="#new-this指向new之后得到的实例" class="headerlink" title="new - this指向new之后得到的实例"></a>new - this指向new之后得到的实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数中的this&#x27;</span>,<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类方法中的this&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&#x27;this&#x27;</span>)</span><br><span class="line">course.<span class="title function_">test</span>()</span><br></pre></td></tr></table></figure>

<h4 id="追问：类中异步方法，this有区别吗"><a href="#追问：类中异步方法，this有区别吗" class="headerlink" title="追问：类中异步方法，this有区别吗"></a>追问：类中异步方法，this有区别吗</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数中的this:&#x27;</span>,<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类方法中的this:&#x27;</span>,<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">asyncTest</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步方法外:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异步方法内:&#x27;</span>,<span class="variable language_">this</span>)</span><br><span class="line">        &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&#x27;this&#x27;</span>);</span><br><span class="line">course.<span class="title function_">test</span>();</span><br><span class="line">course.<span class="title function_">asyncTest</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果<br><img data-src="https://ooo.0x0.ooo/2023/11/28/OrGWMC.png" alt="OrGWMC.png"></p>
</blockquote>
<ul>
<li><ol>
<li>执行setTimeout时，匿名方法执行上下文，在队列和全局执行函数效果相同 - 指向window</li>
</ol>
</li>
<li><ol start="2">
<li>再追问，如何解决 - 记录this &#x2F; 显示 &#x2F; 箭头函数</li>
</ol>
</li>
</ul>
<h3 id="追问：如何突破作用域？"><a href="#追问：如何突破作用域？" class="headerlink" title="追问：如何突破作用域？"></a>追问：如何突破作用域？</h3><h4 id="闭包：一个函数和它周围状态的引用捆绑在一起的组合"><a href="#闭包：一个函数和它周围状态的引用捆绑在一起的组合" class="headerlink" title="闭包：一个函数和它周围状态的引用捆绑在一起的组合"></a><strong>闭包：一个函数和它周围状态的引用捆绑在一起的组合</strong></h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mail</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;信&#x27;</span></span><br><span class="line">    <span class="comment">//包裹起来传递到另一个作用域，突破原作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> envelop = <span class="title function_">mail</span>()</span><br><span class="line"><span class="title function_">envelop</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数可以作为返回值传递的</p>
</li>
<li><p>函数外部可以通过一定方式获取到内部的作用域变量 &#x3D;&gt; 导致内部变量不被GC</p>
</li>
</ul>
<h4 id="函数作为参数的时候"><a href="#函数作为参数的时候" class="headerlink" title="函数作为参数的时候"></a>函数作为参数的时候</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单一职责</span></span><br><span class="line"><span class="keyword">let</span> content;</span><br><span class="line"><span class="comment">// 通用存储</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">envelop</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">    content = <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mail</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">envelop</span>(mail);</span><br></pre></td></tr></table></figure>

<h4 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        counter++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outerFn</span>()();</span><br></pre></td></tr></table></figure>

<h4 id="事件处理（异步）的闭包"><a href="#事件处理（异步）的闭包" class="headerlink" title="事件处理（异步）的闭包"></a>事件处理（异步）的闭包</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;lis.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="追问-立即执行函数-立即执行嵌套-拥有独立作用域"><a href="#追问-立即执行函数-立即执行嵌套-拥有独立作用域" class="headerlink" title="追问:立即执行函数 &#x2F; 立即执行嵌套 &#x3D;&gt; 拥有独立作用域"></a>追问:立即执行函数 &#x2F; 立即执行嵌套 &#x3D;&gt; 拥有独立作用域</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">immediateA</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">function</span> <span class="title function_">immediateB</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;)(<span class="number">1</span>);</span><br><span class="line">&#125;)(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>推动了js的模块化发展</li>
</ul>
<h4 id="闭包：实现私有变量-高频"><a href="#闭包：实现私有变量-高频" class="headerlink" title="闭包：实现私有变量 - 高频"></a>闭包：实现私有变量 - 高频</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = &#123;</span><br><span class="line">    <span class="attr">items</span>:[],</span><br><span class="line">    <span class="attr">push</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createStack</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> items = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">push</span>(<span class="params">item</span>)&#123;</span><br><span class="line">            items.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">setItems</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">        <span class="title function_">getItems</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Nginx?</title>
    <url>/posts/36796.html</url>
    <content><![CDATA[<h1 id="什么是Nginx？"><a href="#什么是Nginx？" class="headerlink" title="什么是Nginx？"></a>什么是Nginx？</h1><p><strong>Nginx</strong>(engine x) 是一个高性能的HTTP和反向代理Web服务器，同时也提供IMAP&#x2F;POP3&#x2F;SMTP服务。<br><strong>特点</strong>是1.占有内存少 2.并发能力强<br><strong>Nginx</strong>几乎可以做到7*24h不间断运行，能在不间断服务下进行软件版本的升级，其代码完全由C语言从头写成，官方数据表示能同时支持5w个并发连接数的响应。</p>
<h1 id="正向代理-反向代理"><a href="#正向代理-反向代理" class="headerlink" title="正向代理&#x2F;反向代理"></a>正向代理&#x2F;反向代理</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>代理客户端的，安装在自己电脑上的，如<strong>VPN</strong></p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>代理服务端的，客户端只用访问同一域名，客户无感知浏览服务资源</p>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p><strong>Nginx</strong>提供2种负载均衡策略——内置策略和扩展策略。<br>内置策略主要有轮询、加权轮询、Ip hash等。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python编写一个jd秒杀脚本</title>
    <url>/posts/33264.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文运用python的selenium模块来编写实现自动秒杀jd商品的脚本。</p>
<span id="more"></span>
<p>脚本的流程如下：</p>
<ol>
<li>在控制台输入抢购的时间</li>
<li>打开浏览器，跳转到<a href="http://www.jd.com/">www.jd.com</a></li>
<li>打开登录页，人工扫码登陆</li>
<li>登陆成功跳转到购物车界面</li>
<li>控制台选择全选还是手动勾选商品</li>
<li>抢购时间自动点击结算按钮</li>
</ol>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><font size="2" color="grey">python环境和ide工具就不作多说</font></p>
<ol>
<li><strong>ChromeDriver安装</strong>：自行搜索网上教程，有很多。</li>
<li><strong>selenium安装</strong>：selenium是python的第三方库，用于Web应用测试，可以直接运行在浏览器模拟用户操作。通过<code>pip install selenium</code>安装，速度慢可以替换国内镜像源，教程网上也有。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>新建一个<code>.py</code>文件打开输入如下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># 打开京东登录页，并进行扫码登录</span></span><br><span class="line">    browser.get(<span class="string">&quot;https://www.jd.com&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> browser.find_element(By.LINK_TEXT, <span class="string">&quot;你好，请登录&quot;</span>):</span><br><span class="line">        browser.find_element(By.LINK_TEXT, <span class="string">&quot;你好，请登录&quot;</span>).click()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;======请在30秒内完成登录&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">30</span>)</span><br><span class="line">        browser.get(<span class="string">&quot;https://cart.jd.com&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;======login success:&#x27;</span>, now.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>(<span class="params">times, choose</span>):</span><br><span class="line">    <span class="comment"># 点击购物车里全选按钮</span></span><br><span class="line">    <span class="keyword">if</span> choose == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;======请手动勾选需要购买的商品&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对比时间，时间到的话就点击结算</span></span><br><span class="line">        <span class="keyword">if</span> now &gt; times:</span><br><span class="line">            <span class="keyword">if</span> choose == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">if</span> browser.find_element(By.ID, <span class="string">&quot;J_SelectAll2&quot;</span>):</span><br><span class="line">                            browser.find_element(By.ID, <span class="string">&quot;J_SelectAll2&quot;</span>).click()</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;======找不到购买按钮&quot;</span>)</span><br><span class="line">            <span class="comment"># 点击结算按钮</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> browser.find_element(By.LINK_TEXT, <span class="string">&quot;去结算&quot;</span>):</span><br><span class="line">                        browser.find_element(By.LINK_TEXT, <span class="string">&quot;去结算&quot;</span>).click()</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;======结算成功&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">if</span> browser.find_element(By.ID, <span class="string">&#x27;order-submit&#x27;</span>):</span><br><span class="line">                        browser.find_element(By.ID, <span class="string">&#x27;order-submit&#x27;</span>).click()</span><br><span class="line">                        now1 = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;======抢购成功时间：%s&quot;</span> % now1)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;======再次尝试提交订单&quot;</span>)</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 抢购主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    times = <span class="built_in">input</span>(<span class="string">&quot;请输入抢购时间，格式如(2018-09-06 11:20:00.000000):&quot;</span>)</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    browser.maximize_window()</span><br><span class="line">    login()</span><br><span class="line">    choose = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;到时间自动勾选购物车请输入“1”，否则输入“2”：&quot;</span>))</span><br><span class="line">    buy(times, choose)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>值得注意的是，网上有的教程写法是<code>find_element_by_link_text</code>，运行会报错，是因为新版本selenium已经使用新的写法<code>find_element(By.XX, &#39; &#39;)</code>，<strong>XX</strong>可以是ID，LINK_TEXT，class_name等等。</p>
<p>运行代码按流程操作就能秒杀抢购自己需要的商品。</p>
<blockquote>
<p>参考链接:<br><a href="https://blog.csdn.net/python03014/article/details/130477281">https://blog.csdn.net/python03014/article/details/130477281</a></p>
</blockquote>
]]></content>
      <categories>
        <category>自动化脚本</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用nodejs编写一个淘宝秒杀脚本</title>
    <url>/posts/958.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文运用dayjs和selenium-webdriver两个包来编写自动秒杀taobao商品的脚本，功能单一简单。</p>
<span id="more"></span>
<p>脚本的流程如下：</p>
<ol>
<li>打开浏览器<code>chrome</code>，最大化并跳转到taobao.com</li>
<li>打开登录页，人工扫码登陆</li>
<li>登陆成功跳转到购物车界面</li>
<li>自动点击全选按钮</li>
<li>自动点击结算按钮</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>打开命令行工具，安装该脚本所需要的两个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//因为作者设置了打赏，需要在末尾加入--no-fund</span><br><span class="line">npm i dayjs --save --no-fund</span><br><span class="line">npm i selenium-webdriver --save --no fund</span><br></pre></td></tr></table></figure>

<p>安装完成后，新建一个<code>.js</code>文件，名称任意，加入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dayjs = <span class="built_in">require</span>(<span class="string">&quot;dayjs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">By</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;selenium-webdriver&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> selenium = <span class="built_in">require</span>(<span class="string">&quot;selenium-webdriver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> driver = <span class="keyword">new</span> selenium.<span class="title class_">Builder</span>().<span class="title function_">forBrowser</span>(<span class="string">&quot;chrome&quot;</span>).<span class="title function_">build</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大化浏览器</span></span><br><span class="line">driver.<span class="title function_">manage</span>().<span class="title function_">window</span>().<span class="title function_">maximize</span>();</span><br><span class="line">driver.<span class="title function_">get</span>(<span class="string">&quot;https://www.taobao.com&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time * <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> loginText = driver.<span class="title function_">findElement</span>(<span class="title class_">By</span>.<span class="title function_">linkText</span>(<span class="string">&quot;亲，请登录&quot;</span>));</span><br><span class="line">  <span class="keyword">if</span> (loginText) loginText.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请在20秒内完成扫码&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">20</span>);</span><br><span class="line">  driver.<span class="title function_">get</span>(<span class="string">&quot;https://cart.taobao.com/cart.htm&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="comment">//   点击全选按钮</span></span><br><span class="line">  <span class="keyword">if</span> (driver.<span class="title function_">findElement</span>(<span class="title class_">By</span>.<span class="title function_">id</span>(<span class="string">&quot;J_SelectAll1&quot;</span>)))</span><br><span class="line">    driver.<span class="title function_">findElement</span>(<span class="title class_">By</span>.<span class="title function_">id</span>(<span class="string">&quot;J_SelectAll1&quot;</span>)).<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录成功：&quot;</span>, <span class="title function_">dayjs</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>));</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">0.4</span>);</span><br><span class="line">  <span class="title function_">buy</span>(<span class="string">&quot;20xx-xx-xx xx:xx:xx&quot;</span>);<span class="comment">//此处修改开售时间</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秒杀</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">buy</span> = <span class="keyword">async</span> (<span class="params">buyTime</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title function_">dayjs</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (now === buyTime) &#123;</span><br><span class="line">      <span class="keyword">if</span> (driver.<span class="title function_">findElement</span>(&#123; <span class="attr">id</span>: <span class="string">&quot;J_Go&quot;</span> &#125;))</span><br><span class="line">        driver.<span class="title function_">findElement</span>(&#123; <span class="attr">id</span>: <span class="string">&quot;J_Go&quot;</span> &#125;).<span class="title function_">click</span>();</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">0.4</span>);</span><br><span class="line">      <span class="title function_">submit</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交订单</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submit</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (driver.<span class="title function_">findElement</span>(<span class="title class_">By</span>.<span class="title function_">linkText</span>(<span class="string">&quot;提交订单&quot;</span>)))</span><br><span class="line">    driver.<span class="title function_">findElement</span>(<span class="title class_">By</span>.<span class="title function_">linkText</span>(<span class="string">&quot;提交订单&quot;</span>)).<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;抢购时间：&quot;</span>, <span class="title function_">dayjs</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>));</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">login</span>();</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在该脚本文件所在位置打开命令行工具，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//xxx.js为刚才保存的脚本文件，名字自定</span><br><span class="line">node xxx.js //回车</span><br></pre></td></tr></table></figure>

<p>脚本自动运行，扫码登陆后就在你设置好的时间开始帮你秒杀商品。</p>
<blockquote>
<p>附 python代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择chromedriver.exe路径</span></span><br><span class="line">s = Service(<span class="string">r&quot;D:\Google\Chrome\Application\chromedriver.exe&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(service=s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">driver.get(<span class="string">&quot;https://www.taobao.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> driver.find_element(By.LINK_TEXT, <span class="string">&quot;亲，请登录&quot;</span>):</span><br><span class="line">driver.find_element(By.LINK_TEXT, <span class="string">&quot;亲，请登录&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;在&quot;</span> + <span class="built_in">str</span>(<span class="number">30</span> - i) + <span class="string">&quot;秒内完成扫码&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;login success:&#x27;</span>, now.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 购物车结算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getcar</span>():</span><br><span class="line">driver.get(<span class="string">&quot;https://cart.taobao.com/cart.htm&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击购物车里全选按钮</span></span><br><span class="line"><span class="keyword">if</span> driver.find_element(By.ID, <span class="string">&quot;J_SelectAll1&quot;</span>):</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;J_SelectAll1&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_order</span>(<span class="params">ordertime</span>):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">now = datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(now)</span><br><span class="line"><span class="keyword">if</span> now &gt;= ordertime:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 点击结算按钮</span></span><br><span class="line"><span class="keyword">if</span> driver.find_element(By.ID, <span class="string">&quot;J_Go&quot;</span>):</span><br><span class="line">driver.find_element(By.ID, <span class="string">&quot;J_Go&quot;</span>).click()</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;standby success:&#x27;</span>, now.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>))</span><br><span class="line"><span class="comment"># 点击提交订单</span></span><br><span class="line"><span class="keyword">if</span> driver.find_element(By.CLASS_NAME, <span class="string">&#x27;go-btn&#x27;</span>):</span><br><span class="line">driver.find_element(By.CLASS_NAME, <span class="string">&quot;go-btn&quot;</span>).click()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;order success:&#x27;</span> + <span class="built_in">str</span>(now))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">login()</span><br><span class="line">getcar()</span><br><span class="line">sub_order(<span class="string">&#x27;2023-08-01 11:28:50.000000&#x27;</span>) <span class="comment">#输入要抢购的时间即可</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考链接:<br><a href="https://www.zhihu.com/tardis/bd/art/609639709?source_id=1001">https://www.zhihu.com/tardis/bd/art/609639709?source_id=1001</a></p>
</blockquote>
]]></content>
      <categories>
        <category>自动化脚本</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>用React Hooks搭建一个电影搜索App</title>
    <url>/posts/13078.html</url>
    <content><![CDATA[<p>这个 App 实现的效果是通过<strong>OMDB API</strong>来搜索电影并将结果展现给用户。搭建这个 App 的过程能帮助我们很好的学习<strong>React Hooks</strong>的用法，练习实际项目能帮助更快上手。</p>
<h3 id="App-完成后的效果预览"><a href="#App-完成后的效果预览" class="headerlink" title="App 完成后的效果预览"></a>App 完成后的效果预览</h3><p><a href="https://imgtg.com/image/OzZvvc"><img data-src="https://i.imgtg.com/2023/07/13/OzZvvc.md.png" alt="OzZvvc.md.png"></a></p>
<span id="more"></span>
<h3 id="项目用到的工具"><a href="#项目用到的工具" class="headerlink" title="项目用到的工具"></a>项目用到的工具</h3><ul>
<li>Node</li>
<li>VsCode</li>
<li>OMDB 的 API key (<a href="http://www.omdbapi.com/apikey.aspx">这里获得</a>)</li>
</ul>
<p>准备好上述工具后，我们需要用 react 的脚手架工具来帮助我们搭建一个全新的 React 应用程序，安装<strong>create-react-app</strong>脚手架：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g create-react-app</span><br><span class="line">//或者用cnpm yarn都可以</span><br></pre></td></tr></table></figure>

<p>然后通过脚手架新建项目:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">create-react-app movie-search-app</span><br></pre></td></tr></table></figure>

<p>完成之后用 VsCode 打开该目录，目录结构如下图所示：<br><a href="https://imgtg.com/image/Ozh9w6"><img data-src="https://i.imgtg.com/2023/07/12/Ozh9w6.md.png" alt="structure"></a></p>
<h3 id="构成该-App-的-4-个组件"><a href="#构成该-App-的-4-个组件" class="headerlink" title="构成该 App 的 4 个组件"></a>构成该 App 的 4 个组件</h3><ul>
<li><strong>App.js</strong> —— 它是其它 3 个组件的父组件，将包含处理 API 请求的函数以及组件初始化时调用的 API</li>
<li><strong>Header.js</strong> —— 接受参数并展示 App 的标题</li>
<li><strong>Movie.js</strong> —— 渲染每个电影，电影对象将通过参数传递给它</li>
<li><strong>Search.js</strong> —— 包含一个带有输入和搜索按钮的表单，处理输入和重置的函数以及一个作为参数传递给它的搜索函数</li>
</ul>
<h3 id="开始着手构建我们的-APP"><a href="#开始着手构建我们的-APP" class="headerlink" title="开始着手构建我们的 APP"></a>开始着手构建我们的 APP</h3><p>在<code>src</code>目录下新建一个文件夹命名为<code>components</code>(之后所有组件都将保存在这个地方)，然后把<code>App.js</code>组件移动到该目录下。新建一个<code>Header.js</code>组件用于展示程序的标题，并加入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Header.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Header</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure>

<p>更新<code>src</code>目录下<code>index.js</code>中的导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/App&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>并且更新<code>App.css</code>中的样式代码(供参考)：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App-header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#282c34</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">10px</span> + <span class="number">2vmin</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spinner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App-intro</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* new css for movie component */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.movies</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.App-header</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.add-movies</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.add-movies</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.movie</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">25px</span> <span class="number">10px</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.errorMessage</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">161</span>, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#282c34</span>;</span><br><span class="line">  <span class="attribute">color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">170px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">694px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">915px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.movie</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">33%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">652px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">693px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.movie</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">651px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.movie</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color="gray" size=2>随时可以用<font color=#C4244D size=2>npm start</font>启动项目来查看效果</font></p>
<p>下一步创建<code>Movie.js</code>组件，代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Movie.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULT_PLACEHOLDER_IMAGE</span> = </span><br><span class="line"><span class="string">&quot;https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Movie</span> = (<span class="params">&#123;movie&#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">//不存在则展示默认图片</span></span><br><span class="line">    <span class="keyword">const</span> poster = movie.<span class="property">Poster</span> === <span class="string">&quot;N/A&quot;</span>? <span class="variable constant_">DEFAULT_PLACEHOLDER_IMAGE</span> : movie.<span class="property">Poster</span>;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;movie&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;movie.Title&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>//展示电影标题</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;poster&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;</span>`<span class="attr">The</span> <span class="attr">movie</span> <span class="attr">titled:</span>$&#123;<span class="attr">movie.Title</span>&#125;`&#125; <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>(&#123;movie.Year&#125;)<span class="tag">&lt;/<span class="name">p</span>&gt;</span>//展示电影年份</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Movie</span>;</span><br></pre></td></tr></table></figure>

<p>接下来开始创建<code>Search</code>组件。这是最关键的一部分，因为使用Hooks之前的React为了处理内部状态需要创建一个类组件…不过现在利用Hooks可以在函数组件内部处理自己的状态。在<code>components</code>文件夹下新建<code>Search.js</code>文件并加入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Search.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Search</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [searchValue, setSearchValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleSearchInputChanges</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setSearchValue</span>(e.<span class="property">target</span>.<span class="property">value</span>);<span class="comment">//修改搜索值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resetInputField</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setSearchValue</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//重置搜索</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">callSearchFunction</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();<span class="comment">//阻止默认操作</span></span><br><span class="line">        props.<span class="title function_">search</span>(searchValue);<span class="comment">//调用搜索</span></span><br><span class="line">        <span class="title function_">resetInputField</span>();<span class="comment">//调用重置函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;searchValue&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handleSearchInputChanges&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SEARCH&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;callSearchFunction&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Search</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Hooks-API-useState介绍"><a href="#Hooks-API-useState介绍" class="headerlink" title="Hooks API - useState介绍"></a>Hooks API - useState介绍</h3><blockquote>
<p>在<code>Search.js</code>组件中使用了一个<strong>hooks API</strong>，即<strong>useState</strong>。顾名思义它允许我们向函数组件添加React状态。<strong>useState</strong>钩子接收一个初始状态参数，并返回一个数组包含当前的状态（<em>this.state</em>）和一个更新它的函数（<em>this.setState</em>）。<br>在我们的示例中，我们将当前状态作为搜索输入值传递。在输入框触发onChange事件时，将调用<em>handleSearchInputChanges</em>函数用于更新输入的搜索值。<em>resetInputField</em>方法用于清空当前搜索框的值。(<a href="https://legacy.reactjs.org/docs/hooks-state.html">更多useState内容</a>)</p>
</blockquote>
<p>接下来让我们更新<code>App.js</code>中的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//App.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./Header&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;./Movie&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Search</span> <span class="keyword">from</span> <span class="string">&#x27;./Search&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MOVIE_API_URL</span> = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>; <span class="comment">// 用自己的替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);<span class="comment">//加载状态</span></span><br><span class="line">  <span class="keyword">const</span> [movies, setMovies] = <span class="title function_">useState</span>([]);<span class="comment">//电影列表</span></span><br><span class="line">  <span class="keyword">const</span> [errorMessage,setErrorMessage] = <span class="title function_">useState</span>(<span class="literal">null</span>);<span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">MOVIE_API_URL</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setMovies</span>(jsonResponse.<span class="property">Search</span>);</span><br><span class="line">      <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,[]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">search</span> = searchValue =&gt; &#123;<span class="comment">//搜索方法</span></span><br><span class="line">    <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">setErrorMessage</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`https://www.omdbapi.com/?s=<span class="subst">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(jsonResponse.<span class="property">Response</span> === <span class="string">&quot;True&quot;</span>)&#123;</span><br><span class="line">                <span class="title function_">setMovies</span>(jsonResponse.<span class="property">Search</span>);</span><br><span class="line">                <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">setErrorMessage</span>(jsonResponse.<span class="property">Error</span>);</span><br><span class="line">                <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> <span class="attr">text</span>=<span class="string">&quot;MovieSearchApp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Search</span> <span class="attr">search</span>=<span class="string">&#123;search&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Search</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;App-intro&#x27;</span>&gt;</span>分享一些喜欢的电影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;movies&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; loading&amp;&amp;!errorMessage?(</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ):errorMessage?(</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;errorMessage&#x27;</span>&gt;</span>&#123;errorMessage&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ):(</span></span><br><span class="line"><span class="language-xml">          movies.map((movie,index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Movie</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">movie.Title</span>&#125;`&#125; <span class="attr">movie</span>=<span class="string">&#123;movie&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<p>在上述代码中，我们用到了3个<strong>useState</strong>函数，第一个函数用于处理当前加载状态；第二个函数用于处理从服务器获取的电影数组；第三个函数用于处理API请求时可能返回的错误信息。</p>
<p>然后我们用到了第二种hooks API：<strong>useEffect</strong><br>这个钩子基本上能让你在函数组件中执行副作用，副作用指的是例如数据获取，订阅和手动操作DOM这类事情。这个钩子最棒的一部分来自官方文档的介绍：</p>
<blockquote>
<p>如果你熟悉React的类的生命周期方法，你可以将useEffect看作componentDidMout，componentDidUpdate和componentWillUnmount的结合。</p>
</blockquote>
<p>这是因为<strong>useEffect</strong>会在第一次渲染（componentDidMount）之后和每次更新（componentDidUpdate）之后进行调用。</p>
<p>你可能想知道如果它在每次更新之后都进行调用，那么它和componentDidMount有何相似的地方？那是因为这个函数接受两个参数，一个是你想要运行的函数另一个是数组。在该数组中我们只需要传入一个值去告诉React如果该值没有修改则跳过应用的函数效果。</p>
<p>根据文档，这和我们在componentDidUpdate中添加一个if判断语句类似：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for class components</span></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(prevState.<span class="property">count</span> !== <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;<span class="variable language_">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for hooks</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;,[count]);<span class="comment">// 只有count改变了才会再执行</span></span><br></pre></td></tr></table></figure>

<p>在我们的代码中初始化时并没有要改变的值，所以可以传入一个空数组来告诉React这个方法需要调用一次。</p>
<p>如你所见，我们有三个存在一定联系的<strong>useState</strong>函数，所以它们应该可以用某种方式组合起来。因此React为我们提供了另一个hook——<strong>useReducer</strong>。利用这个钩子我们的代码变成如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">loading</span>:<span class="literal">true</span>,</span><br><span class="line">  <span class="attr">movies</span>:[],</span><br><span class="line">  <span class="attr">errorMessage</span>:<span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state,action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.<span class="property">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">loading</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">errorMessage</span>:<span class="literal">null</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">loading</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">movies</span>:action.<span class="property">payload</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">loading</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">movies</span>:action.<span class="property">error</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state,dispatch] = <span class="title function_">useReducer</span>(reducer,initialState);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">MOVIE_API_URL</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>:<span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">          <span class="attr">payload</span>:jsonResponse.<span class="property">Search</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,[]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">search</span> = searchValue =&gt; &#123;<span class="comment">//搜索方法</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`https://www.omdbapi.com/?s=<span class="subst">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(jsonResponse.<span class="property">Response</span> === <span class="string">&quot;True&quot;</span>)&#123;</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">            <span class="attr">payload</span>:jsonResponse.<span class="property">Search</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>,</span><br><span class="line">            <span class="attr">error</span>:jsonResponse.<span class="property">Error</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; movies, errorMessage, loading&#125; = state;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;App&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Header</span> <span class="attr">text</span>=<span class="string">&quot;MovieSearchApp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Search</span> <span class="attr">search</span>=<span class="string">&#123;search&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Search</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#x27;App-intro&#x27;</span>&gt;</span>分享一些喜欢的电影<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;movies&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123; loading&amp;&amp;!errorMessage?(</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ):errorMessage?(</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;errorMessage&#x27;</span>&gt;</span>&#123;errorMessage&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ):(</span></span><br><span class="line"><span class="language-xml">          movies.map((movie,index) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Movie</span> <span class="attr">key</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span>&#125;<span class="attr">-</span>$&#123;<span class="attr">movie.Title</span>&#125;`&#125; <span class="attr">movie</span>=<span class="string">&#123;movie&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))</span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>useReducer</strong>钩子接受3个参数，不过我们只使用了其中2个。一个典型的用力如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer,initialState);</span><br></pre></td></tr></table></figure>

<p>在我们的代码中，reducer接收我们定义的initialState对象和一系列操作，基于操作的类型返回给我们新的状态对象。例如我们的操作类型是”<strong>SEARCH_MOVIES_REQUEST</strong>“，状态将更新为”loading&#x3D;true,errorMessage&#x3D;null”。</p>
<p>另一件需要注意的事情是，在<strong>useEffect</strong>中，我们将从服务器获取的电影数组作为payload来执行dispatch操作，在<code>search</code>方法中我们实际上有3个不同的操作。</p>
<ul>
<li>SEARCH_MOVIES_REQUEST：更新状态对象，loading&#x3D;true，errorMessage&#x3D;false。</li>
<li>SEARCH_MOVIES_SUCCESS：如果请求成功，那么更新状态，loading&#x3D;false，movies&#x3D;a_ction.payload。payload是从OMDB获取到的电影搜索结果。</li>
<li>SEARCH_MOVIES_FAILURE：请求失败的话，loading&#x3D;false，errorMessage&#x3D;action.error。error也是服务器返回的错误消息。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此我们整个项目做完了，用到了<strong>useState</strong>、<strong>useReducer</strong>、<strong>useEffect</strong>三个hooks。对React hooks的用法有了一个基本的了解，更多详细的内容推荐去官网阅读。</p>
<blockquote>
<p>原文链接:<br><a href="https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/">https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>React</tag>
      </tags>
  </entry>
</search>
